
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a3c  08000a3c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a3c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a40  08000a40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000a48  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000a48  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ff8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000804  00000000  00000000  0002302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000438  00000000  00000000  00023830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e0  00000000  00000000  00023c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000253f  00000000  00000000  00024048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002510  00000000  00000000  00026587  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac03e  00000000  00000000  00028a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010c8  00000000  00000000  000d4b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a24 	.word	0x08000a24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000a24 	.word	0x08000a24

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <LL_RCC_LSI_Enable+0x20>)
 8000216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800021a:	4a05      	ldr	r2, [pc, #20]	; (8000230 <LL_RCC_LSI_Enable+0x20>)
 800021c:	f043 0301 	orr.w	r3, r3, #1
 8000220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <LL_RCC_LSI_IsReady+0x24>)
 800023a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800023e:	f003 0302 	and.w	r3, r3, #2
 8000242:	2b02      	cmp	r3, #2
 8000244:	d101      	bne.n	800024a <LL_RCC_LSI_IsReady+0x16>
 8000246:	2301      	movs	r3, #1
 8000248:	e000      	b.n	800024c <LL_RCC_LSI_IsReady+0x18>
 800024a:	2300      	movs	r3, #0
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000

0800025c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <LL_RCC_MSI_Enable+0x1c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <LL_RCC_MSI_Enable+0x1c>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <LL_RCC_MSI_IsReady+0x20>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0302 	and.w	r3, r3, #2
 8000288:	2b02      	cmp	r3, #2
 800028a:	d101      	bne.n	8000290 <LL_RCC_MSI_IsReady+0x14>
 800028c:	2301      	movs	r3, #1
 800028e:	e000      	b.n	8000292 <LL_RCC_MSI_IsReady+0x16>
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000

080002c0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LL_RCC_MSI_SetRange+0x24>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002d0:	4904      	ldr	r1, [pc, #16]	; (80002e4 <LL_RCC_MSI_SetRange+0x24>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	600b      	str	r3, [r1, #0]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	021b      	lsls	r3, r3, #8
 80002fc:	4904      	ldr	r1, [pc, #16]	; (8000310 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80002fe:	4313      	orrs	r3, r2
 8000300:	604b      	str	r3, [r1, #4]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <LL_RCC_SetSysClkSource+0x24>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f023 0203 	bic.w	r2, r3, #3
 8000324:	4904      	ldr	r1, [pc, #16]	; (8000338 <LL_RCC_SetSysClkSource+0x24>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	608b      	str	r3, [r1, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <LL_RCC_GetSysClkSource+0x18>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 030c 	and.w	r3, r3, #12
}
 8000348:	4618      	mov	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000368:	4904      	ldr	r1, [pc, #16]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	608b      	str	r3, [r1, #8]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000390:	4904      	ldr	r1, [pc, #16]	; (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	608b      	str	r3, [r1, #8]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003b8:	4904      	ldr	r1, [pc, #16]	; (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	608b      	str	r3, [r1, #8]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <LL_RCC_SetRTCClockSource+0x28>)
 80003da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80003e2:	4905      	ldr	r1, [pc, #20]	; (80003f8 <LL_RCC_SetRTCClockSource+0x28>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_RCC_EnableRTC+0x20>)
 8000402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <LL_RCC_EnableRTC+0x20>)
 8000408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <LL_RCC_ForceBackupDomainReset+0x20>)
 800042c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800044a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000472:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000474:	4907      	ldr	r1, [pc, #28]	; (8000494 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <LL_APB1_GRP1_EnableClock+0x2c>)
 800047e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4013      	ands	r3, r2
 8000484:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004a4:	4907      	ldr	r1, [pc, #28]	; (80004c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LL_FLASH_SetLatency+0x24>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f023 0207 	bic.w	r2, r3, #7
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <LL_FLASH_SetLatency+0x24>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	600b      	str	r3, [r1, #0]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40022000 	.word	0x40022000

080004f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_FLASH_GetLatency+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f003 0307 	and.w	r3, r3, #7
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40022000 	.word	0x40022000

0800050c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800051c:	4904      	ldr	r1, [pc, #16]	; (8000530 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	600b      	str	r3, [r1, #0]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40007000 	.word	0x40007000

08000534 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <LL_PWR_EnableBkUpAccess+0x1c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <LL_PWR_EnableBkUpAccess+0x1c>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40007000 	.word	0x40007000

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff9d 	bl	8000498 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800055e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000562:	f7ff ff81 	bl	8000468 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000566:	2003      	movs	r0, #3
 8000568:	f7ff fe2e 	bl	80001c8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f804 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8000570:	f000 f852 	bl	8000618 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x20>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffa3 	bl	80004c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000582:	bf00      	nop
 8000584:	f7ff ffb4 	bl	80004f0 <LL_FLASH_GetLatency>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1fa      	bne.n	8000584 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f7ff ffbb 	bl	800050c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8000596:	f7ff fe3b 	bl	8000210 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800059a:	bf00      	nop
 800059c:	f7ff fe4a 	bl	8000234 <LL_RCC_LSI_IsReady>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d1fa      	bne.n	800059c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 80005a6:	f7ff fe59 	bl	800025c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80005aa:	bf00      	nop
 80005ac:	f7ff fe66 	bl	800027c <LL_RCC_MSI_IsReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d1fa      	bne.n	80005ac <SystemClock_Config+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 80005b6:	f7ff fe73 	bl	80002a0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80005ba:	2060      	movs	r0, #96	; 0x60
 80005bc:	f7ff fe80 	bl	80002c0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fe91 	bl	80002e8 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80005c6:	f7ff ffb5 	bl	8000534 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 80005ca:	f7ff ff29 	bl	8000420 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 80005ce:	f7ff ff39 	bl	8000444 <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f7ff fefb 	bl	80003d0 <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 80005da:	f7ff ff0f 	bl	80003fc <LL_RCC_EnableRTC>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff fe98 	bl	8000314 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80005e4:	bf00      	nop
 80005e6:	f7ff fea9 	bl	800033c <LL_RCC_GetSysClkSource>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1fa      	bne.n	80005e6 <SystemClock_Config+0x6e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff feb1 	bl	8000358 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fec2 	bl	8000380 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff fed3 	bl	80003a8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <SystemClock_Config+0x9c>)
 8000604:	f000 f9cc 	bl	80009a0 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <SystemClock_Config+0x9c>)
 800060a:	f000 f9d7 	bl	80009bc <LL_SetSystemCoreClock>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	003d0900 	.word	0x003d0900

08000618 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000628:	f7ff fee8 	bl	80003fc <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	60bb      	str	r3, [r7, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	60fb      	str	r3, [r7, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_RTC_Init+0x34>)
 800063e:	f000 f933 	bl	80008a8 <LL_RTC_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40002800 	.word	0x40002800

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <SystemInit+0x64>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <SystemInit+0x64>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <SystemInit+0x68>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <SystemInit+0x68>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <SystemInit+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <SystemInit+0x68>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <SystemInit+0x68>)
 80006dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <SystemInit+0x68>)
 80006e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <SystemInit+0x68>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <SystemInit+0x68>)
 80006f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <SystemInit+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <SystemInit+0x64>)
 8000702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000706:	609a      	str	r2, [r3, #8]
#endif
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	40021000 	.word	0x40021000

0800071c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000754 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff ffc6 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000724:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000726:	e003      	b.n	8000730 <LoopCopyDataInit>

08000728 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800072a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800072c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800072e:	3104      	adds	r1, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000734:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000736:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000738:	d3f6      	bcc.n	8000728 <CopyDataInit>
	ldr	r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LoopForever+0x12>)
	b	LoopFillZerobss
 800073c:	e002      	b.n	8000744 <LoopFillZerobss>

0800073e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800073e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000740:	f842 3b04 	str.w	r3, [r2], #4

08000744 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LoopForever+0x16>)
	cmp	r2, r3
 8000746:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000748:	d3f9      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f000 f947 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074e:	f7ff ff01 	bl	8000554 <main>

08000752 <LoopForever>:

LoopForever:
    b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000754:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000758:	08000a44 	.word	0x08000a44
	ldr	r0, =_sdata
 800075c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000760:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000764:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000768:	20000020 	.word	0x20000020

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>

0800076e <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	609a      	str	r2, [r3, #8]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f04f 32ff 	mov.w	r2, #4294967295
 80007a2:	60da      	str	r2, [r3, #12]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80007be:	60da      	str	r2, [r3, #12]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	041b      	lsls	r3, r3, #16
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000806:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	431a      	orrs	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	611a      	str	r2, [r3, #16]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	22ca      	movs	r2, #202	; 0xca
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2253      	movs	r2, #83	; 0x53
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	2b40      	cmp	r3, #64	; 0x40
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800088c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffbe 	bl	8000838 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f822 	bl	8000906 <LL_RTC_EnterInitMode>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d016      	beq.n	80008f6 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff4d 	bl	800076e <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff8a 	bl	80007f4 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff70 	bl	80007cc <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff5f 	bl	80007b0 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff91 	bl	800081e <LL_RTC_EnableWriteProtection>

  return status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8000914:	2300      	movs	r3, #0
 8000916:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff9d 	bl	8000858 <LL_RTC_IsActiveFlag_INIT>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d11e      	bne.n	8000962 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff35 	bl	8000794 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ff94 	bl	8000858 <LL_RTC_IsActiveFlag_INIT>
 8000930:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8000932:	e010      	b.n	8000956 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8000934:	f7ff ffa4 	bl	8000880 <LL_SYSTICK_IsActiveCounterFlag>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d102      	bne.n	8000944 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3b01      	subs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff87 	bl	8000858 <LL_RTC_IsActiveFlag_INIT>
 800094a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <LL_RTC_EnterInitMode+0x5c>
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d1e8      	bne.n	8000934 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8000962:	7dfb      	ldrb	r3, [r7, #23]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <LL_InitTick+0x30>)
 8000980:	3b01      	subs	r3, #1
 8000982:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_InitTick+0x30>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <LL_InitTick+0x30>)
 800098c:	2205      	movs	r2, #5
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e010 	.word	0xe000e010

080009a0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffdd 	bl	800096c <LL_InitTick>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <LL_SetSystemCoreClock+0x1c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000000 	.word	0x20000000

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4e0d      	ldr	r6, [pc, #52]	; (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	; (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1ba4      	subs	r4, r4, r6
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2500      	movs	r5, #0
 80009e8:	42a5      	cmp	r5, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4e0b      	ldr	r6, [pc, #44]	; (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	; (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 f818 	bl	8000a24 <_init>
 80009f4:	1ba4      	subs	r4, r4, r6
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2500      	movs	r5, #0
 80009fa:	42a5      	cmp	r5, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a04:	4798      	blx	r3
 8000a06:	3501      	adds	r5, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a0e:	4798      	blx	r3
 8000a10:	3501      	adds	r5, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a3c 	.word	0x08000a3c
 8000a18:	08000a3c 	.word	0x08000a3c
 8000a1c:	08000a3c 	.word	0x08000a3c
 8000a20:	08000a40 	.word	0x08000a40

08000a24 <_init>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr

08000a30 <_fini>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr
