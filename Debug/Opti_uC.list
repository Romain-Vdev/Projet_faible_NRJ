
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b0  080010b0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080010b0  080010b0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b0  080010b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080010b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  080010c0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080010c0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fd1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a91  00000000  00000000  00024009  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  00024aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00025058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f71a  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002ece  00000000  00000000  00044cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac91e  00000000  00000000  00047b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f44ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001754  00000000  00000000  000f452c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001058 	.word	0x08001058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001058 	.word	0x08001058

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
//#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13
#define PWM_PIN LL_GPIO_PIN_10

void GPIO_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Green LED (user LED) - PA5
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Blue button - PC13
LL_GPIO_SetPinMode( GPIOC, BUT_PIN, LL_GPIO_MODE_INPUT );
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4808      	ldr	r0, [pc, #32]	; (8000354 <GPIO_init+0x50>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
// Sortie PWM 50 Hz
LL_GPIO_SetPinMode(GPIOC, PWM_PIN, LL_GPIO_MODE_OUTPUT);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <GPIO_init+0x50>)
 8000340:	f7ff ff5a 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( GPIOC, PWM_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <GPIO_init+0x50>)
 800034c:	f7ff ff91 	bl	8000272 <LL_GPIO_SetPinOutputType>

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000800 	.word	0x48000800

08000358 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
if	( val )
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d005      	beq.n	8000372 <LED_GREEN+0x1a>
	LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 8000366:	2120      	movs	r1, #32
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f7ff ffae 	bl	80002cc <LL_GPIO_SetOutputPin>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}
 8000370:	e004      	b.n	800037c <LED_GREEN+0x24>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 8000372:	2120      	movs	r1, #32
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f7ff ffb6 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
return ( !LL_GPIO_IsInputPinSet( GPIOC, BUT_PIN ) );
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <BLUE_BUTTON+0x20>)
 800038e:	f7ff ff88 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	48000800 	.word	0x48000800

080003a8 <PWM_50Hz>:

void PWM_50Hz(int val)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if	( val )
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d005      	beq.n	80003c2 <PWM_50Hz+0x1a>
		LL_GPIO_SetOutputPin(  GPIOC, PWM_PIN );
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <PWM_50Hz+0x2c>)
 80003bc:	f7ff ff86 	bl	80002cc <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );

}
 80003c0:	e004      	b.n	80003cc <PWM_50Hz+0x24>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );
 80003c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c6:	4803      	ldr	r0, [pc, #12]	; (80003d4 <PWM_50Hz+0x2c>)
 80003c8:	f7ff ff8e 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000800 	.word	0x48000800

080003d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003e4:	4907      	ldr	r1, [pc, #28]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f6:	68fb      	ldr	r3, [r7, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 800041e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_LSE_Enable+0x20>)
 800043e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <LL_RCC_LSE_Enable+0x20>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800046a:	f023 0218 	bic.w	r2, r3, #24
 800046e:	4905      	ldr	r1, [pc, #20]	; (8000484 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4313      	orrs	r3, r2
 8000474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <LL_RCC_LSE_IsReady+0x24>)
 800048e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000492:	f003 0302 	and.w	r3, r3, #2
 8000496:	2b02      	cmp	r3, #2
 8000498:	d101      	bne.n	800049e <LL_RCC_LSE_IsReady+0x16>
 800049a:	2301      	movs	r3, #1
 800049c:	e000      	b.n	80004a0 <LL_RCC_LSE_IsReady+0x18>
 800049e:	2300      	movs	r3, #0
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <LL_RCC_MSI_Enable+0x1c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <LL_RCC_MSI_Enable+0x1c>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_RCC_MSI_IsReady+0x20>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d101      	bne.n	80004e4 <LL_RCC_MSI_IsReady+0x14>
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <LL_RCC_MSI_IsReady+0x16>
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_RCC_SetSysClkSource+0x24>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f023 0203 	bic.w	r2, r3, #3
 8000524:	4904      	ldr	r1, [pc, #16]	; (8000538 <LL_RCC_SetSysClkSource+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <LL_RCC_GetSysClkSource+0x18>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f003 030c 	and.w	r3, r3, #12
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_SetAHBPrescaler+0x24>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_RCC_SetAHBPrescaler+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	608b      	str	r3, [r1, #8]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	608b      	str	r3, [r1, #8]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005b8:	4904      	ldr	r1, [pc, #16]	; (80005cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	608b      	str	r3, [r1, #8]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000

080005d0 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <LL_RCC_SetRTCClockSource+0x28>)
 80005da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005e2:	4905      	ldr	r1, [pc, #20]	; (80005f8 <LL_RCC_SetRTCClockSource+0x28>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_RCC_EnableRTC+0x20>)
 8000602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <LL_RCC_EnableRTC+0x20>)
 8000608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <LL_RCC_ForceBackupDomainReset+0x20>)
 800062c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <LL_RCC_PLL_Enable+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <LL_RCC_PLL_Enable+0x1c>)
 8000672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <LL_RCC_PLL_Disable+0x1c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <LL_RCC_PLL_Disable+0x1c>)
 8000692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <LL_RCC_PLL_IsReady+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80006b8:	d101      	bne.n	80006be <LL_RCC_PLL_IsReady+0x16>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <LL_RCC_PLL_IsReady+0x18>
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006e4:	4013      	ands	r3, r2
 80006e6:	68f9      	ldr	r1, [r7, #12]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	4311      	orrs	r1, r2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	0212      	lsls	r2, r2, #8
 80006f0:	4311      	orrs	r1, r2
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006f8:	4313      	orrs	r3, r2
 80006fa:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000
 800070c:	f9ff808c 	.word	0xf9ff808c

08000710 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800071a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800073a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <LL_FLASH_SetLatency+0x24>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f023 0207 	bic.w	r2, r3, #7
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <LL_FLASH_SetLatency+0x24>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	600b      	str	r3, [r1, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40022000 	.word	0x40022000

08000778 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000788:	4904      	ldr	r1, [pc, #16]	; (800079c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	600b      	str	r3, [r1, #0]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40007000 	.word	0x40007000

080007a0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40007000 	.word	0x40007000

080007c0 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80007ce:	60da      	str	r2, [r3, #12]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	041b      	lsls	r3, r3, #16
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	611a      	str	r2, [r3, #16]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	611a      	str	r2, [r3, #16]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	22ca      	movs	r2, #202	; 0xca
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2253      	movs	r2, #83	; 0x53
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3350      	adds	r3, #80	; 0x50
 800087c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3350      	adds	r3, #80	; 0x50
 80008ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d8:	2b40      	cmp	r3, #64	; 0x40
 80008da:	bf0c      	ite	eq
 80008dc:	2301      	moveq	r3, #1
 80008de:	2300      	movne	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	2b20      	cmp	r3, #32
 8000900:	bf0c      	ite	eq
 8000902:	2301      	moveq	r3, #1
 8000904:	2300      	movne	r3, #0
 8000906:	b2db      	uxtb	r3, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60da      	str	r2, [r3, #12]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <LL_LPM_EnableSleep+0x1c>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <LL_LPM_EnableSleep+0x1c>)
 8000942:	f023 0304 	bic.w	r3, r3, #4
 8000946:	6113      	str	r3, [r2, #16]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6153      	str	r3, [r2, #20]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40010400 	.word	0x40010400

08000978 <main>:
void RTC_wakeup_init_from_stop( int delay );
void RTC_WKUP_IRQHandler();
void Set_Low_Power_Mode(uint32_t LowPowerMode);

int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

	  // Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fd43 	bl	8000408 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000982:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000986:	f7ff fd27 	bl	80003d8 <LL_APB1_GRP1_EnableClock>

	  // config GPIO
	  GPIO_init();
 800098a:	f7ff fcbb 	bl	8000304 <GPIO_init>

	  // config RTC
	  RTC_Config();
 800098e:	f000 f8c5 	bl	8000b1c <RTC_Config>

	  // si j'appuie sur le bouton bleu et que je reset => je change d'expérience, expe s'incrémente
	  if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000992:	f7ff fcf7 	bl	8000384 <BLUE_BUTTON>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d01a      	beq.n	80009d2 <main+0x5a>

		  // je récupère la valeur de expe dans le backup register
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 800099c:	2100      	movs	r1, #0
 800099e:	4821      	ldr	r0, [pc, #132]	; (8000a24 <main+0xac>)
 80009a0:	f7ff ff7b 	bl	800089a <LL_RTC_BAK_GetRegister>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <main+0xb0>)
 80009aa:	601a      	str	r2, [r3, #0]
		  expe++;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <main+0xb0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <main+0xb0>)
 80009b4:	6013      	str	r3, [r2, #0]

		  if (expe>8)
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <main+0xb0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b08      	cmp	r3, #8
 80009bc:	dd02      	ble.n	80009c4 <main+0x4c>
       		expe=1;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <main+0xb0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]

		 // stockage de la nouvelle valeur expe dans le backup register
		LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <main+0xb0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <main+0xac>)
 80009ce:	f7ff ff4b 	bl	8000868 <LL_RTC_BAK_SetRegister>
	  }



	  /* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
	  if (expe==1)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <main+0xb0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <main+0x68>
		  SystemClock_Config(); // fonction à appeler si expe == 1
 80009da:	f000 f837 	bl	8000a4c <SystemClock_Config>
 80009de:	e001      	b.n	80009e4 <main+0x6c>
	  else
		  SystemClock_Config_MSI_24Mhz();
 80009e0:	f000 f868 	bl	8000ab4 <SystemClock_Config_MSI_24Mhz>


	  // Fonction qui active la calibration MSI vs LSE en fonction de expe
	   Calibration_MSI_vs_LPE();
 80009e4:	f000 f826 	bl	8000a34 <Calibration_MSI_vs_LPE>



	  // init systick timer (tick period at 10 ms)
	  LL_Init10msTick( SystemCoreClock );
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <main+0xb4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fb03 	bl	8000ff8 <LL_Init10msTick>

	  while (1)  {

		  if (bluemode==1){
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <main+0xb8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1fb      	bne.n	80009f2 <main+0x7a>

			  if ((expe==1) || (expe==3))
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <main+0xb0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d003      	beq.n	8000a0a <main+0x92>
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <main+0xb0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d101      	bne.n	8000a0e <main+0x96>
				  LL_LPM_EnableSleep();
 8000a0a:	f7ff ff95 	bl	8000938 <LL_LPM_EnableSleep>
			  	  // if expe = 1 :  MSI=4MHz | PLL=80Hz | V.Scaling=1 | F.Latency=4 | Calibration=OFF | Sleep=OFF->ON
			 	  // if expe = 3 :  MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF | Sleep=OFF->ON

			  if ((expe==2) || (expe==4))
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <main+0xb0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d003      	beq.n	8000a1e <main+0xa6>
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <main+0xb0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d1e9      	bne.n	80009f2 <main+0x7a>
				  LL_RCC_MSI_EnablePLLMode();
 8000a1e:	f7ff fd69 	bl	80004f4 <LL_RCC_MSI_EnablePLLMode>
		  if (bluemode==1){
 8000a22:	e7e6      	b.n	80009f2 <main+0x7a>
 8000a24:	40002800 	.word	0x40002800
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	20000024 	.word	0x20000024

08000a34 <Calibration_MSI_vs_LPE>:
	  * @brief Active le mécanisme dit "calibration" qui utilise une sorte de PLL asservie à l'oscillateur LSE

	  * @param  None
	  * @retval None
	  */
	void Calibration_MSI_vs_LPE(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
		// calibration active par défaut quand expe vaut 5,6,7 ou 8
		if (expe >= 5)
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <Calibration_MSI_vs_LPE+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	dd01      	ble.n	8000a44 <Calibration_MSI_vs_LPE+0x10>
			LL_RCC_MSI_EnablePLLMode();
 8000a40:	f7ff fd58 	bl	80004f4 <LL_RCC_MSI_EnablePLLMode>

	}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000

08000a4c <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000a50:	2004      	movs	r0, #4
 8000a52:	f7ff fe7d 	bl	8000750 <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 8000a56:	f7ff fd2b 	bl	80004b0 <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff fd38 	bl	80004d0 <LL_RCC_MSI_IsReady>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1fa      	bne.n	8000a5c <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000a66:	2300      	movs	r3, #0
 8000a68:	2228      	movs	r2, #40	; 0x28
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fe2f 	bl	80006d0 <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 8000a72:	f7ff fdf9 	bl	8000668 <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 8000a76:	f7ff fe4b 	bl	8000710 <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff fe14 	bl	80006a8 <LL_RCC_PLL_IsReady>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d1fa      	bne.n	8000a7c <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff fd66 	bl	8000558 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f7ff fd41 	bl	8000514 <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a92:	bf00      	nop
 8000a94:	f7ff fd52 	bl	800053c <LL_RCC_GetSysClkSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b0c      	cmp	r3, #12
 8000a9c:	d1fa      	bne.n	8000a94 <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fd6e 	bl	8000580 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fd7f 	bl	80005a8 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000aaa:	f000 f93f 	bl	8000d2c <SystemCoreClockUpdate>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SystemClock_Config_MSI_24Mhz+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d103      	bne.n	8000ac8 <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fe45 	bl	8000750 <LL_FLASH_SetLatency>
 8000ac6:	e002      	b.n	8000ace <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f7ff fe41 	bl	8000750 <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 8000ace:	f7ff fcef 	bl	80004b0 <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff fcfc 	bl	80004d0 <LL_RCC_MSI_IsReady>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d1fa      	bne.n	8000ad4 <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 8000ade:	f7ff fdd3 	bl	8000688 <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 8000ae2:	f7ff fe25 	bl	8000730 <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <SystemClock_Config_MSI_24Mhz+0x64>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d003      	beq.n	8000af6 <SystemClock_Config_MSI_24Mhz+0x42>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000aee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000af2:	f7ff fe41 	bl	8000778 <LL_PWR_SetRegulVoltageScaling>


/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fd2e 	bl	8000558 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f7ff fd09 	bl	8000514 <LL_RCC_SetSysClkSource>
//while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
	//{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fd3c 	bl	8000580 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fd4d 	bl	80005a8 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000b0e:	f000 f90d 	bl	8000d2c <SystemCoreClockUpdate>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000

08000b1c <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if (LL_RCC_LSE_IsReady()!= 1){
 8000b20:	f7ff fcb2 	bl	8000488 <LL_RCC_LSE_IsReady>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d006      	beq.n	8000b38 <RTC_Config+0x1c>
	//if (((RCC->BDCR)&(RCC_BDCR_LSEON))==RCC_BDCR_LSEON) { // cas du démarrage à chaud
			// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
			LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000b2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b2e:	f7ff fc53 	bl	80003d8 <LL_APB1_GRP1_EnableClock>
			LL_PWR_EnableBkUpAccess();
 8000b32:	f7ff fe35 	bl	80007a0 <LL_PWR_EnableBkUpAccess>

			// je stocke la variable expe au premier tour qui vaut 1
			expe=1;
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
		}
}
 8000b36:	e046      	b.n	8000bc6 <RTC_Config+0xaa>
			LL_PWR_EnableBkUpAccess();
 8000b38:	f7ff fe32 	bl	80007a0 <LL_PWR_EnableBkUpAccess>
			LL_RCC_ForceBackupDomainReset();
 8000b3c:	f7ff fd70 	bl	8000620 <LL_RCC_ForceBackupDomainReset>
			LL_RCC_ReleaseBackupDomainReset();
 8000b40:	f7ff fd80 	bl	8000644 <LL_RCC_ReleaseBackupDomainReset>
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fc89 	bl	800045c <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_Enable();
 8000b4a:	f7ff fc75 	bl	8000438 <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() != 1);
 8000b4e:	bf00      	nop
 8000b50:	f7ff fc9a 	bl	8000488 <LL_RCC_LSE_IsReady>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1fa      	bne.n	8000b50 <RTC_Config+0x34>
			LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b5e:	f7ff fd37 	bl	80005d0 <LL_RCC_SetRTCClockSource>
			LL_RCC_EnableRTC();
 8000b62:	f7ff fd4b 	bl	80005fc <LL_RCC_EnableRTC>
			LL_RTC_DisableWriteProtection(RTC);
 8000b66:	4819      	ldr	r0, [pc, #100]	; (8000bcc <RTC_Config+0xb0>)
 8000b68:	f7ff fe6e 	bl	8000848 <LL_RTC_DisableWriteProtection>
			if(!LL_RTC_EnterInitMode(RTC));
 8000b6c:	4817      	ldr	r0, [pc, #92]	; (8000bcc <RTC_Config+0xb0>)
 8000b6e:	f000 f9f5 	bl	8000f5c <LL_RTC_EnterInitMode>
			LL_RTC_SetAsynchPrescaler(RTC,128);
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <RTC_Config+0xb0>)
 8000b76:	f7ff fe31 	bl	80007dc <LL_RTC_SetAsynchPrescaler>
			LL_RTC_SetSynchPrescaler(RTC,256);
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <RTC_Config+0xb0>)
 8000b80:	f7ff fe40 	bl	8000804 <LL_RTC_SetSynchPrescaler>
			LL_RTC_DisableInitMode(RTC);
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <RTC_Config+0xb0>)
 8000b86:	f7ff fe1b 	bl	80007c0 <LL_RTC_DisableInitMode>
			while(LL_RTC_IsActiveFlag_INIT(RTC));
 8000b8a:	bf00      	nop
 8000b8c:	480f      	ldr	r0, [pc, #60]	; (8000bcc <RTC_Config+0xb0>)
 8000b8e:	f7ff fe9b 	bl	80008c8 <LL_RTC_IsActiveFlag_INIT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f9      	bne.n	8000b8c <RTC_Config+0x70>
			LL_RTC_ClearFlag_RS(RTC);
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <RTC_Config+0xb0>)
 8000b9a:	f7ff febb 	bl	8000914 <LL_RTC_ClearFlag_RS>
			while(!LL_RTC_IsActiveFlag_RS(RTC));
 8000b9e:	bf00      	nop
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <RTC_Config+0xb0>)
 8000ba2:	f7ff fea4 	bl	80008ee <LL_RTC_IsActiveFlag_RS>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f9      	beq.n	8000ba0 <RTC_Config+0x84>
			LL_RTC_EnableWriteProtection(RTC);
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <RTC_Config+0xb0>)
 8000bae:	f7ff fe3e 	bl	800082e <LL_RTC_EnableWriteProtection>
			expe=1;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <RTC_Config+0xb4>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <RTC_Config+0xb4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <RTC_Config+0xb0>)
 8000bc2:	f7ff fe51 	bl	8000868 <LL_RTC_BAK_SetRegister>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40002800 	.word	0x40002800
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
void SysTick_Handler(void)
	{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <SysTick_Handler+0x8c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <SysTick_Handler+0x8c>)
 8000be0:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 5*expe))
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SysTick_Handler+0x8c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	dd0b      	ble.n	8000c02 <SysTick_Handler+0x2e>
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <SysTick_Handler+0x90>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	441a      	add	r2, r3
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <SysTick_Handler+0x8c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	db02      	blt.n	8000c02 <SysTick_Handler+0x2e>
			LED_GREEN(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fbab 	bl	8000358 <LED_GREEN>

		if ((counter> 5*expe) && (counter<200))
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <SysTick_Handler+0x90>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	441a      	add	r2, r3
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <SysTick_Handler+0x8c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	da06      	bge.n	8000c22 <SysTick_Handler+0x4e>
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <SysTick_Handler+0x8c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2bc7      	cmp	r3, #199	; 0xc7
 8000c1a:	dc02      	bgt.n	8000c22 <SysTick_Handler+0x4e>
			LED_GREEN(0);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fb9b 	bl	8000358 <LED_GREEN>

		if (counter>200)
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <SysTick_Handler+0x8c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2bc8      	cmp	r3, #200	; 0xc8
 8000c28:	dd02      	ble.n	8000c30 <SysTick_Handler+0x5c>
			counter=0;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <SysTick_Handler+0x8c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000c30:	f7ff fba8 	bl	8000384 <BLUE_BUTTON>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <SysTick_Handler+0x6c>
			bluemode=1;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <SysTick_Handler+0x94>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]


	  /* USER CODE END SysTick_IRQn 1 */

	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */
		if (counter%2)
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <SysTick_Handler+0x8c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <SysTick_Handler+0x80>
			PWM_50Hz(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fbab 	bl	80003a8 <PWM_50Hz>
			PWM_50Hz(0);

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000c52:	e002      	b.n	8000c5a <SysTick_Handler+0x86>
			PWM_50Hz(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fba7 	bl	80003a8 <PWM_50Hz>
	}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000028 	.word	0x20000028
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000024 	.word	0x20000024

08000c6c <RTC_WKUP_IRQHandler>:
	}

//----------------------------------------------------------------------
	// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
	{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 8000c70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c74:	f7ff fe70 	bl	8000958 <LL_EXTI_ClearFlag_0_31>
	}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SystemInit>:
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <SystemInit+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <SystemInit+0x68>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <SystemInit+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <SystemInit+0x68>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <SystemInit+0x68>)
 8000cec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <SystemInit+0x68>)
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SystemInit+0x68>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <SystemInit+0x68>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <SystemInit+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x64>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	40021000 	.word	0x40021000

08000d2c <SystemCoreClockUpdate>:
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	2302      	movs	r3, #2
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <SystemCoreClockUpdate+0x3a>
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e005      	b.n	8000d72 <SystemCoreClockUpdate+0x46>
 8000d66:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <SystemCoreClockUpdate+0x160>)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	d865      	bhi.n	8000e54 <SystemCoreClockUpdate+0x128>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <SystemCoreClockUpdate+0x64>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000dc5 	.word	0x08000dc5
 8000d94:	08000e55 	.word	0x08000e55
 8000d98:	08000e55 	.word	0x08000e55
 8000d9c:	08000e55 	.word	0x08000e55
 8000da0:	08000dcd 	.word	0x08000dcd
 8000da4:	08000e55 	.word	0x08000e55
 8000da8:	08000e55 	.word	0x08000e55
 8000dac:	08000e55 	.word	0x08000e55
 8000db0:	08000dd5 	.word	0x08000dd5
 8000db4:	08000e55 	.word	0x08000e55
 8000db8:	08000e55 	.word	0x08000e55
 8000dbc:	08000e55 	.word	0x08000e55
 8000dc0:	08000ddd 	.word	0x08000ddd
 8000dc4:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e047      	b.n	8000e5c <SystemCoreClockUpdate+0x130>
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000dce:	4a31      	ldr	r2, [pc, #196]	; (8000e94 <SystemCoreClockUpdate+0x168>)
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e043      	b.n	8000e5c <SystemCoreClockUpdate+0x130>
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000dd6:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <SystemCoreClockUpdate+0x16c>)
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e03f      	b.n	8000e5c <SystemCoreClockUpdate+0x130>
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	3301      	adds	r3, #1
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d002      	beq.n	8000e00 <SystemCoreClockUpdate+0xd4>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d006      	beq.n	8000e0c <SystemCoreClockUpdate+0xe0>
 8000dfe:	e00b      	b.n	8000e18 <SystemCoreClockUpdate+0xec>
 8000e00:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <SystemCoreClockUpdate+0x168>)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e00b      	b.n	8000e24 <SystemCoreClockUpdate+0xf8>
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <SystemCoreClockUpdate+0x16c>)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	e005      	b.n	8000e24 <SystemCoreClockUpdate+0xf8>
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	bf00      	nop
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	0e5b      	lsrs	r3, r3, #25
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	3301      	adds	r3, #1
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e003      	b.n	8000e5c <SystemCoreClockUpdate+0x130>
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	bf00      	nop
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <SystemCoreClockUpdate+0x15c>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <SystemCoreClockUpdate+0x170>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <SystemCoreClockUpdate+0x164>)
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	08001080 	.word	0x08001080
 8000e90:	20000004 	.word	0x20000004
 8000e94:	00f42400 	.word	0x00f42400
 8000e98:	007a1200 	.word	0x007a1200
 8000e9c:	08001070 	.word	0x08001070

08000ea0 <Reset_Handler>:
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopForever+0x2>
 8000ea4:	f7ff ff0c 	bl	8000cc0 <SystemInit>
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e003      	b.n	8000eb4 <LoopCopyDataInit>

08000eac <CopyDataInit>:
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopForever+0x6>)
 8000eae:	585b      	ldr	r3, [r3, r1]
 8000eb0:	5043      	str	r3, [r0, r1]
 8000eb2:	3104      	adds	r1, #4

08000eb4 <LoopCopyDataInit>:
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <LoopForever+0xa>)
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <LoopForever+0xe>)
 8000eb8:	1842      	adds	r2, r0, r1
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3f6      	bcc.n	8000eac <CopyDataInit>
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopForever+0x12>)
 8000ec0:	e002      	b.n	8000ec8 <LoopFillZerobss>

08000ec2 <FillZerobss>:
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f842 3b04 	str.w	r3, [r2], #4

08000ec8 <LoopFillZerobss>:
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <LoopForever+0x16>)
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3f9      	bcc.n	8000ec2 <FillZerobss>
 8000ece:	f000 f89f 	bl	8001010 <__libc_init_array>
 8000ed2:	f7ff fd51 	bl	8000978 <main>

08000ed6 <LoopForever>:
 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
 8000ed8:	20018000 	.word	0x20018000
 8000edc:	080010b8 	.word	0x080010b8
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	2000002c 	.word	0x2000002c

08000ef0 <ADC1_2_IRQHandler>:
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>

08000ef2 <LL_RTC_EnableInitMode>:
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f00:	60da      	str	r2, [r3, #12]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <LL_RTC_IsActiveFlag_INIT>:
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1e:	2b40      	cmp	r3, #64	; 0x40
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffcd 	bl	8000f0e <LL_RTC_IsActiveFlag_INIT>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11e      	bne.n	8000fb8 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb9 	bl	8000ef2 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ffc4 	bl	8000f0e <LL_RTC_IsActiveFlag_INIT>
 8000f86:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8000f88:	e010      	b.n	8000fac <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8000f8a:	f7ff ffd3 	bl	8000f34 <LL_SYSTICK_IsActiveCounterFlag>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d102      	bne.n	8000f9a <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb7 	bl	8000f0e <LL_RTC_IsActiveFlag_INIT>
 8000fa0:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <LL_RTC_EnterInitMode+0x5c>
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1e8      	bne.n	8000f8a <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <LL_InitTick+0x30>)
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <LL_InitTick+0x30>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <LL_InitTick+0x30>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 100U);
 8001000:	2164      	movs	r1, #100	; 0x64
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffde 	bl	8000fc4 <LL_InitTick>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <__libc_init_array>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4e0d      	ldr	r6, [pc, #52]	; (8001048 <__libc_init_array+0x38>)
 8001014:	4c0d      	ldr	r4, [pc, #52]	; (800104c <__libc_init_array+0x3c>)
 8001016:	1ba4      	subs	r4, r4, r6
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	2500      	movs	r5, #0
 800101c:	42a5      	cmp	r5, r4
 800101e:	d109      	bne.n	8001034 <__libc_init_array+0x24>
 8001020:	4e0b      	ldr	r6, [pc, #44]	; (8001050 <__libc_init_array+0x40>)
 8001022:	4c0c      	ldr	r4, [pc, #48]	; (8001054 <__libc_init_array+0x44>)
 8001024:	f000 f818 	bl	8001058 <_init>
 8001028:	1ba4      	subs	r4, r4, r6
 800102a:	10a4      	asrs	r4, r4, #2
 800102c:	2500      	movs	r5, #0
 800102e:	42a5      	cmp	r5, r4
 8001030:	d105      	bne.n	800103e <__libc_init_array+0x2e>
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001038:	4798      	blx	r3
 800103a:	3501      	adds	r5, #1
 800103c:	e7ee      	b.n	800101c <__libc_init_array+0xc>
 800103e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001042:	4798      	blx	r3
 8001044:	3501      	adds	r5, #1
 8001046:	e7f2      	b.n	800102e <__libc_init_array+0x1e>
 8001048:	080010b0 	.word	0x080010b0
 800104c:	080010b0 	.word	0x080010b0
 8001050:	080010b0 	.word	0x080010b0
 8001054:	080010b4 	.word	0x080010b4

08001058 <_init>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr

08001064 <_fini>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr
