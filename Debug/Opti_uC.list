
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001374  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080014fc  080014fc  000114fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800153c  0800153c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800153c  0800153c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800153c  0800153c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800153c  0800153c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  0800154c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800154c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004090  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a91  00000000  00000000  000240c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  00025138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec72  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002f8a  00000000  00000000  0004431a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac954  00000000  00000000  000472a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  000f3c74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014e4 	.word	0x080014e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080014e4 	.word	0x080014e4

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
//#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13
#define PWM_PIN LL_GPIO_PIN_10

void GPIO_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Green LED (user LED) - PA5
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Blue button - PC13 PA0
//LL_GPIO_SetPinMode( GPIOC, BUT_PIN, LL_GPIO_MODE_INPUT );
LL_GPIO_SetPinMode( GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT );
 800032c:	2200      	movs	r2, #0
 800032e:	2101      	movs	r1, #1
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
// Sortie PWM 50 Hz
LL_GPIO_SetPinMode(GPIOC, PWM_PIN, LL_GPIO_MODE_OUTPUT);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <GPIO_init+0x50>)
 8000340:	f7ff ff5a 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( GPIOC, PWM_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <GPIO_init+0x50>)
 800034c:	f7ff ff91 	bl	8000272 <LL_GPIO_SetPinOutputType>

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000800 	.word	0x48000800

08000358 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
if	( val )
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d005      	beq.n	8000372 <LED_GREEN+0x1a>
	LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 8000366:	2120      	movs	r1, #32
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f7ff ffae 	bl	80002cc <LL_GPIO_SetOutputPin>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}
 8000370:	e004      	b.n	800037c <LED_GREEN+0x24>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 8000372:	2120      	movs	r1, #32
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f7ff ffb6 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
//return ( !LL_GPIO_IsInputPinSet( GPIOC, BUT_PIN ) );
	return ( !LL_GPIO_IsInputPinSet( GPIOA,LL_GPIO_PIN_0) );
 8000388:	2101      	movs	r1, #1
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f7ff ff88 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <PWM_50Hz>:

void PWM_50Hz(int val)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if	( val )
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d005      	beq.n	80003be <PWM_50Hz+0x1a>
		LL_GPIO_SetOutputPin(  GPIOC, PWM_PIN );
 80003b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <PWM_50Hz+0x2c>)
 80003b8:	f7ff ff88 	bl	80002cc <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );

}
 80003bc:	e004      	b.n	80003c8 <PWM_50Hz+0x24>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <PWM_50Hz+0x2c>)
 80003c4:	f7ff ff90 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	48000800 	.word	0x48000800

080003d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db0b      	blt.n	80003fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 021f 	and.w	r2, r3, #31
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <__NVIC_EnableIRQ+0x38>)
 80003ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	2001      	movs	r0, #1
 80003f6:	fa00 f202 	lsl.w	r2, r0, r2
 80003fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000e100 	.word	0xe000e100

08000410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	6039      	str	r1, [r7, #0]
 800041a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800041c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	db0a      	blt.n	800043a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	b2da      	uxtb	r2, r3
 8000428:	490c      	ldr	r1, [pc, #48]	; (800045c <__NVIC_SetPriority+0x4c>)
 800042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042e:	0112      	lsls	r2, r2, #4
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	440b      	add	r3, r1
 8000434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000438:	e00a      	b.n	8000450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4908      	ldr	r1, [pc, #32]	; (8000460 <__NVIC_SetPriority+0x50>)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f003 030f 	and.w	r3, r3, #15
 8000446:	3b04      	subs	r3, #4
 8000448:	0112      	lsls	r2, r2, #4
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	440b      	add	r3, r1
 800044e:	761a      	strb	r2, [r3, #24]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	e000e100 	.word	0xe000e100
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <LL_APB1_GRP1_EnableClock+0x2c>)
 800046e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000470:	4907      	ldr	r1, [pc, #28]	; (8000490 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <LL_APB1_GRP1_EnableClock+0x2c>)
 800047a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4013      	ands	r3, r2
 8000480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000

08000494 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800049e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004a0:	4907      	ldr	r1, [pc, #28]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <LL_RCC_LSE_Enable+0x20>)
 80004ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <LL_RCC_LSE_Enable+0x20>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80004f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004f6:	f023 0218 	bic.w	r2, r3, #24
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LL_RCC_LSE_IsReady+0x24>)
 800051a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d101      	bne.n	800052a <LL_RCC_LSE_IsReady+0x16>
 8000526:	2301      	movs	r3, #1
 8000528:	e000      	b.n	800052c <LL_RCC_LSE_IsReady+0x18>
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_RCC_MSI_Enable+0x1c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <LL_RCC_MSI_Enable+0x1c>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_MSI_IsReady+0x20>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b02      	cmp	r3, #2
 800056a:	d101      	bne.n	8000570 <LL_RCC_MSI_IsReady+0x14>
 800056c:	2301      	movs	r3, #1
 800056e:	e000      	b.n	8000572 <LL_RCC_MSI_IsReady+0x16>
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d101      	bne.n	80005d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80005d0:	2301      	movs	r3, #1
 80005d2:	e000      	b.n	80005d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_RCC_MSI_SetRange+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <LL_RCC_MSI_SetRange+0x24>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	600b      	str	r3, [r1, #0]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <LL_RCC_SetSysClkSource+0x24>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f023 0203 	bic.w	r2, r3, #3
 800061c:	4904      	ldr	r1, [pc, #16]	; (8000630 <LL_RCC_SetSysClkSource+0x24>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	608b      	str	r3, [r1, #8]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <LL_RCC_GetSysClkSource+0x18>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 030c 	and.w	r3, r3, #12
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <LL_RCC_SetAHBPrescaler+0x24>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000660:	4904      	ldr	r1, [pc, #16]	; (8000674 <LL_RCC_SetAHBPrescaler+0x24>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	608b      	str	r3, [r1, #8]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000

08000678 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000688:	4904      	ldr	r1, [pc, #16]	; (800069c <LL_RCC_SetAPB1Prescaler+0x24>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	608b      	str	r3, [r1, #8]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	608b      	str	r3, [r1, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <LL_RCC_SetRTCClockSource+0x28>)
 80006d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006da:	4905      	ldr	r1, [pc, #20]	; (80006f0 <LL_RCC_SetRTCClockSource+0x28>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4313      	orrs	r3, r2
 80006e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <LL_RCC_EnableRTC+0x20>)
 80006fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <LL_RCC_EnableRTC+0x20>)
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <LL_RCC_ForceBackupDomainReset+0x20>)
 800071e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <LL_RCC_PLL_Enable+0x1c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <LL_RCC_PLL_Enable+0x1c>)
 800076a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <LL_RCC_PLL_Disable+0x1c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <LL_RCC_PLL_Disable+0x1c>)
 800078a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_RCC_PLL_IsReady+0x24>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007b0:	d101      	bne.n	80007b6 <LL_RCC_PLL_IsReady+0x16>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e000      	b.n	80007b8 <LL_RCC_PLL_IsReady+0x18>
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80007dc:	4013      	ands	r3, r2
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4311      	orrs	r1, r2
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	0212      	lsls	r2, r2, #8
 80007e8:	4311      	orrs	r1, r2
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	4904      	ldr	r1, [pc, #16]	; (8000800 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007f0:	4313      	orrs	r3, r2
 80007f2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	f9ff808c 	.word	0xf9ff808c

08000808 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 8000832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <LL_FLASH_SetLatency+0x24>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f023 0207 	bic.w	r2, r3, #7
 8000858:	4904      	ldr	r1, [pc, #16]	; (800086c <LL_FLASH_SetLatency+0x24>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4313      	orrs	r3, r2
 800085e:	600b      	str	r3, [r1, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40022000 	.word	0x40022000

08000870 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000880:	4904      	ldr	r1, [pc, #16]	; (8000894 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4313      	orrs	r3, r2
 8000886:	600b      	str	r3, [r1, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40007000 	.word	0x40007000

08000898 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40007000 	.word	0x40007000

080008b8 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_PWR_SetPowerMode+0x24>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 0207 	bic.w	r2, r3, #7
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <LL_PWR_SetPowerMode+0x24>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	600b      	str	r3, [r1, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40007000 	.word	0x40007000

080008e0 <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <LL_PWR_EnableInternWU+0x1c>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <LL_PWR_EnableInternWU+0x1c>)
 80008ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ee:	6093      	str	r3, [r2, #8]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40007000 	.word	0x40007000

08000900 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800090e:	60da      	str	r2, [r3, #12]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	611a      	str	r2, [r3, #16]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	431a      	orrs	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	611a      	str	r2, [r3, #16]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	22ca      	movs	r2, #202	; 0xca
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2253      	movs	r2, #83	; 0x53
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	609a      	str	r2, [r3, #8]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f023 0207 	bic.w	r2, r3, #7
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	0c1b      	lsrs	r3, r3, #16
 8000a1e:	041b      	lsls	r3, r3, #16
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	615a      	str	r2, [r3, #20]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3350      	adds	r3, #80	; 0x50
 8000a48:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4413      	add	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3350      	adds	r3, #80	; 0x50
 8000a78:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f463 6290 	orn	r2, r3, #1152	; 0x480
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60da      	str	r2, [r3, #12]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac6:	2b40      	cmp	r3, #64	; 0x40
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	2b20      	cmp	r3, #32
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60da      	str	r2, [r3, #12]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf0c      	ite	eq
 8000b3a:	2301      	moveq	r3, #1
 8000b3c:	2300      	movne	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <LL_LPM_EnableSleep+0x1c>)
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <LL_LPM_EnableSleep+0x1c>)
 8000b76:	f023 0304 	bic.w	r3, r3, #4
 8000b7a:	6113      	str	r3, [r2, #16]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <LL_LPM_EnableDeepSleep+0x1c>)
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <LL_LPM_EnableDeepSleep+0x1c>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6113      	str	r3, [r2, #16]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <LL_EXTI_EnableIT_0_31+0x20>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <LL_EXTI_EnableIT_0_31+0x20>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	4904      	ldr	r1, [pc, #16]	; (8000bf0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]

}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6153      	str	r3, [r2, #20]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40010400 	.word	0x40010400

08000c14 <main>:
void RTC_WKUP_IRQHandler();
void Set_Low_Power_Mode(uint32_t LowPowerMode);
void Init_Low_Power_Mode(uint32_t LowPowerMode);

int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

	  // Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fc3b 	bl	8000494 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c22:	f7ff fc1f 	bl	8000464 <LL_APB1_GRP1_EnableClock>

	  // config GPIO
	  GPIO_init();
 8000c26:	f7ff fb6d 	bl	8000304 <GPIO_init>

	  // config RTC pour que la fréquence soit à 1Hz
	  RTC_Config();
 8000c2a:	f000 f93b 	bl	8000ea4 <RTC_Config>

	  // si j'appuie sur le bouton bleu et que je reset => je change d'expérience, expe s'incrémente
	  if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000c2e:	f7ff fba9 	bl	8000384 <BLUE_BUTTON>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d01b      	beq.n	8000c70 <main+0x5c>

		  // je récupère la valeur de expe dans le backup register
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4857      	ldr	r0, [pc, #348]	; (8000d98 <main+0x184>)
 8000c3c:	f7ff ff13 	bl	8000a66 <LL_RTC_BAK_GetRegister>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <main+0x188>)
 8000c46:	601a      	str	r2, [r3, #0]
		  expe++;
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <main+0x188>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a53      	ldr	r2, [pc, #332]	; (8000d9c <main+0x188>)
 8000c50:	6013      	str	r3, [r2, #0]

		  if (expe>8)
 8000c52:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <main+0x188>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	dd02      	ble.n	8000c60 <main+0x4c>
       		expe=1;
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <main+0x188>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

		 // stockage de la nouvelle valeur expe dans le backup register
		LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <main+0x188>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	484b      	ldr	r0, [pc, #300]	; (8000d98 <main+0x184>)
 8000c6a:	f7ff fee3 	bl	8000a34 <LL_RTC_BAK_SetRegister>
 8000c6e:	e007      	b.n	8000c80 <main+0x6c>

	  }else
		  // on récupère la valeur de expe
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	4849      	ldr	r0, [pc, #292]	; (8000d98 <main+0x184>)
 8000c74:	f7ff fef7 	bl	8000a66 <LL_RTC_BAK_GetRegister>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <main+0x188>)
 8000c7e:	601a      	str	r2, [r3, #0]


	  /* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
	  if (expe==1)
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <main+0x188>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d102      	bne.n	8000c8e <main+0x7a>
		  SystemClock_Config(); // fonction à appeler si expe == 1
 8000c88:	f000 f89a 	bl	8000dc0 <SystemClock_Config>
 8000c8c:	e001      	b.n	8000c92 <main+0x7e>
	  else
		  SystemClock_Config_MSI_24Mhz();
 8000c8e:	f000 f8cb 	bl	8000e28 <SystemClock_Config_MSI_24Mhz>


	  // Fonction qui active la calibration MSI vs LSE en fonction de expe
	   Calibration_MSI_vs_LPE();
 8000c92:	f000 f889 	bl	8000da8 <Calibration_MSI_vs_LPE>



	  // init systick timer (tick period at 10 ms)
	  LL_Init10msTick( SystemCoreClock );
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <main+0x18c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fbf2 	bl	8001484 <LL_Init10msTick>


	  while (1)  {

		  if (bluemode==1){
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <main+0x190>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d16c      	bne.n	8000d82 <main+0x16e>




			  switch(expe)
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <main+0x188>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d86f      	bhi.n	8000d92 <main+0x17e>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <main+0xa4>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000cd9 	.word	0x08000cd9
 8000cbc:	08000ce1 	.word	0x08000ce1
 8000cc0:	08000ce7 	.word	0x08000ce7
 8000cc4:	08000cef 	.word	0x08000cef
 8000cc8:	08000cf5 	.word	0x08000cf5
 8000ccc:	08000d1d 	.word	0x08000d1d
 8000cd0:	08000d45 	.word	0x08000d45
 8000cd4:	08000d6d 	.word	0x08000d6d
			  {

			  	 case 1:
			  		 	 LL_LPM_EnableSleep();// MSI=4MHz | PLL=80Hz | V.Scaling=1 | F.Latency=4 | Calibration=OFF | Sleep=OFF->ON
 8000cd8:	f7ff ff48 	bl	8000b6c <LL_LPM_EnableSleep>
			  		 	 __WFI();
 8000cdc:	bf30      	wfi
			  		 	 break;
 8000cde:	e059      	b.n	8000d94 <main+0x180>

			  	 case 2:
			  		 	 LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=1 | F.Latency=1 | Calibration=OFF->ON | Sleep=OFF
 8000ce0:	f7ff fc4e 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>
			  		 	 break ;
 8000ce4:	e056      	b.n	8000d94 <main+0x180>

			  	 case 3:
			  		 	 LL_LPM_EnableSleep(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF | Sleep=OFF->ON
 8000ce6:	f7ff ff41 	bl	8000b6c <LL_LPM_EnableSleep>
			  		 	 __WFI();
 8000cea:	bf30      	wfi
			  		 	 break ;
 8000cec:	e052      	b.n	8000d94 <main+0x180>

			  	 case 4:
			  		 	 LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF->ON | Sleep=OFF
 8000cee:	f7ff fc47 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>
			  		 	 break ;
 8000cf2:	e04f      	b.n	8000d94 <main+0x180>

			  	case 5: // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration= ON | Sleep= ON | STOP0, wakeup 20s

			  			Init_Low_Power_Mode(LL_PWR_MODE_STOP0); // Set the wake up timer to 10 sec
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f9d9 	bl	80010ac <Init_Low_Power_Mode>
			  			Set_Low_Power_Mode(LL_PWR_MODE_STOP0);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f9f8 	bl	80010f0 <Set_Low_Power_Mode>
			  			__WFI();
 8000d00:	bf30      	wfi
			  			bluemode=0;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <main+0x190>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
			  			SystemClock_Config_MSI_24Mhz();
 8000d08:	f000 f88e 	bl	8000e28 <SystemClock_Config_MSI_24Mhz>
			  			LL_Init10msTick( SystemCoreClock );
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <main+0x18c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fbb7 	bl	8001484 <LL_Init10msTick>
			  			LL_RCC_MSI_EnablePLLMode();
 8000d16:	f7ff fc33 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>

			  			break;
 8000d1a:	e03b      	b.n	8000d94 <main+0x180>

				case 6: // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration= ON | Sleep= ON | STOP0, wakeup 20s

						Init_Low_Power_Mode(LL_PWR_MODE_STOP1); // Set the wake up timer to 10 sec
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 f9c5 	bl	80010ac <Init_Low_Power_Mode>
			  			Set_Low_Power_Mode(LL_PWR_MODE_STOP1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 f9e4 	bl	80010f0 <Set_Low_Power_Mode>
			  			__WFI();
 8000d28:	bf30      	wfi
			  			bluemode=0;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <main+0x190>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
						SystemClock_Config_MSI_24Mhz();
 8000d30:	f000 f87a 	bl	8000e28 <SystemClock_Config_MSI_24Mhz>
						LL_Init10msTick( SystemCoreClock );
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <main+0x18c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fba3 	bl	8001484 <LL_Init10msTick>
						LL_RCC_MSI_EnablePLLMode();
 8000d3e:	f7ff fc1f 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>

						break;
 8000d42:	e027      	b.n	8000d94 <main+0x180>

				case 7: // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration= ON | Sleep= ON | STOP0, wakeup 20s

						Init_Low_Power_Mode(LL_PWR_MODE_STOP2); // Set the wake up timer to 10 sec
 8000d44:	2002      	movs	r0, #2
 8000d46:	f000 f9b1 	bl	80010ac <Init_Low_Power_Mode>
						Set_Low_Power_Mode(LL_PWR_MODE_STOP2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 f9d0 	bl	80010f0 <Set_Low_Power_Mode>
						__WFI();
 8000d50:	bf30      	wfi
						bluemode=0;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <main+0x190>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
						// On remet les configurations car le STOPMODE se réveille ici
						SystemClock_Config_MSI_24Mhz();
 8000d58:	f000 f866 	bl	8000e28 <SystemClock_Config_MSI_24Mhz>
						LL_Init10msTick( SystemCoreClock );
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <main+0x18c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fb8f 	bl	8001484 <LL_Init10msTick>
						LL_RCC_MSI_EnablePLLMode();
 8000d66:	f7ff fc0b 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>

						break;
 8000d6a:	e013      	b.n	8000d94 <main+0x180>

			  	case 8:
			  			Init_Low_Power_Mode(LL_PWR_MODE_SHUTDOWN);
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f000 f99d 	bl	80010ac <Init_Low_Power_Mode>
			  		    Set_Low_Power_Mode(LL_PWR_MODE_SHUTDOWN);
 8000d72:	2004      	movs	r0, #4
 8000d74:	f000 f9bc 	bl	80010f0 <Set_Low_Power_Mode>
			  		    __WFI();
 8000d78:	bf30      	wfi
			  			bluemode=0;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <main+0x190>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
			  			break;
 8000d80:	e008      	b.n	8000d94 <main+0x180>

			   }// end switch

		  }
		  else { // pour les expériences 5 à 8 le sleepmode est le mode normal de fonctionnement
			  if(expe>4){
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <main+0x188>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	dd8a      	ble.n	8000ca0 <main+0x8c>

				  LL_LPM_EnableSleep();
 8000d8a:	f7ff feef 	bl	8000b6c <LL_LPM_EnableSleep>
				  __WFI();
 8000d8e:	bf30      	wfi
 8000d90:	e786      	b.n	8000ca0 <main+0x8c>
			  		 break ;
 8000d92:	bf00      	nop
		  if (bluemode==1){
 8000d94:	e784      	b.n	8000ca0 <main+0x8c>
 8000d96:	bf00      	nop
 8000d98:	40002800 	.word	0x40002800
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000024 	.word	0x20000024

08000da8 <Calibration_MSI_vs_LPE>:
	  * @brief Active le mécanisme dit "calibration" qui utilise une sorte de PLL asservie à l'oscillateur LSE

	  * @param  None
	  * @retval None
	  */
	void Calibration_MSI_vs_LPE(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
		// calibration active par défaut quand expe vaut 5,6,7 ou 8
		if (expe >= 5)
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <Calibration_MSI_vs_LPE+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	dd01      	ble.n	8000db8 <Calibration_MSI_vs_LPE+0x10>
			LL_RCC_MSI_EnablePLLMode();
 8000db4:	f7ff fbe4 	bl	8000580 <LL_RCC_MSI_EnablePLLMode>

	}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f7ff fd3f 	bl	8000848 <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 8000dca:	f7ff fbb7 	bl	800053c <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 8000dce:	bf00      	nop
 8000dd0:	f7ff fbc4 	bl	800055c <LL_RCC_MSI_IsReady>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d1fa      	bne.n	8000dd0 <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2228      	movs	r2, #40	; 0x28
 8000dde:	2100      	movs	r1, #0
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff fcf1 	bl	80007c8 <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 8000de6:	f7ff fcbb 	bl	8000760 <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 8000dea:	f7ff fd0d 	bl	8000808 <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 8000dee:	bf00      	nop
 8000df0:	f7ff fcd6 	bl	80007a0 <LL_RCC_PLL_IsReady>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d1fa      	bne.n	8000df0 <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fc28 	bl	8000650 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fc03 	bl	800060c <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e06:	bf00      	nop
 8000e08:	f7ff fc14 	bl	8000634 <LL_RCC_GetSysClkSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b0c      	cmp	r3, #12
 8000e10:	d1fa      	bne.n	8000e08 <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fc30 	bl	8000678 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff fc41 	bl	80006a0 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000e1e:	f000 f9cb 	bl	80011b8 <SystemCoreClockUpdate>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <SystemClock_Config_MSI_24Mhz+0x78>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d103      	bne.n	8000e3c <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff fd07 	bl	8000848 <LL_FLASH_SetLatency>
 8000e3a:	e002      	b.n	8000e42 <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f7ff fd03 	bl	8000848 <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 8000e42:	f7ff fb7b 	bl	800053c <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 8000e46:	bf00      	nop
 8000e48:	f7ff fb88 	bl	800055c <LL_RCC_MSI_IsReady>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d1fa      	bne.n	8000e48 <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fbfc 	bl	8000650 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fbd7 	bl	800060c <LL_RCC_SetSysClkSource>

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 8000e5e:	f7ff fc8f 	bl	8000780 <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 8000e62:	f7ff fce1 	bl	8000828 <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <SystemClock_Config_MSI_24Mhz+0x78>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d003      	beq.n	8000e76 <SystemClock_Config_MSI_24Mhz+0x4e>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000e6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e72:	f7ff fcfd 	bl	8000870 <LL_PWR_SetRegulVoltageScaling>

//while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
	//{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fbfe 	bl	8000678 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fc0f 	bl	80006a0 <LL_RCC_SetAPB2Prescaler>

// Set MSI clock to 24MHz
LL_RCC_MSI_EnableRangeSelection();
 8000e82:	f7ff fb8d 	bl	80005a0 <LL_RCC_MSI_EnableRangeSelection>
while(LL_RCC_MSI_IsEnabledRangeSelect()!=1)
 8000e86:	bf00      	nop
 8000e88:	f7ff fb9a 	bl	80005c0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1fa      	bne.n	8000e88 <SystemClock_Config_MSI_24Mhz+0x60>
{};
LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000e92:	2090      	movs	r0, #144	; 0x90
 8000e94:	f7ff fba6 	bl	80005e4 <LL_RCC_MSI_SetRange>
/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000e98:	f000 f98e 	bl	80011b8 <SystemCoreClockUpdate>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if (LL_RCC_LSE_IsReady()== 1){
 8000ea8:	f7ff fb34 	bl	8000514 <LL_RCC_LSE_IsReady>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <RTC_Config+0x1c>
	//if (((RCC->BDCR)&(RCC_BDCR_LSEON))==RCC_BDCR_LSEON) { // cas du démarrage à chaud
			// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
			LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000eb2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000eb6:	f7ff fad5 	bl	8000464 <LL_APB1_GRP1_EnableClock>
			LL_PWR_EnableBkUpAccess();
 8000eba:	f7ff fced 	bl	8000898 <LL_PWR_EnableBkUpAccess>

			// je stocke la variable expe au premier tour qui vaut 1
			expe=1;
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
		}
}
 8000ebe:	e046      	b.n	8000f4e <RTC_Config+0xaa>
			LL_PWR_EnableBkUpAccess();
 8000ec0:	f7ff fcea 	bl	8000898 <LL_PWR_EnableBkUpAccess>
			LL_RCC_ForceBackupDomainReset();
 8000ec4:	f7ff fc28 	bl	8000718 <LL_RCC_ForceBackupDomainReset>
			LL_RCC_ReleaseBackupDomainReset();
 8000ec8:	f7ff fc38 	bl	800073c <LL_RCC_ReleaseBackupDomainReset>
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fb0b 	bl	80004e8 <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_Enable();
 8000ed2:	f7ff faf7 	bl	80004c4 <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() != 1);
 8000ed6:	bf00      	nop
 8000ed8:	f7ff fb1c 	bl	8000514 <LL_RCC_LSE_IsReady>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d1fa      	bne.n	8000ed8 <RTC_Config+0x34>
			LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000ee2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ee6:	f7ff fbef 	bl	80006c8 <LL_RCC_SetRTCClockSource>
			LL_RCC_EnableRTC();
 8000eea:	f7ff fc03 	bl	80006f4 <LL_RCC_EnableRTC>
			LL_RTC_DisableWriteProtection(RTC);
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <RTC_Config+0xb0>)
 8000ef0:	f7ff fd4a 	bl	8000988 <LL_RTC_DisableWriteProtection>
			if(!LL_RTC_EnterInitMode(RTC));
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <RTC_Config+0xb0>)
 8000ef6:	f000 fa77 	bl	80013e8 <LL_RTC_EnterInitMode>
			LL_RTC_SetAsynchPrescaler(RTC,127);
 8000efa:	217f      	movs	r1, #127	; 0x7f
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <RTC_Config+0xb0>)
 8000efe:	f7ff fd0d 	bl	800091c <LL_RTC_SetAsynchPrescaler>
			LL_RTC_SetSynchPrescaler(RTC,257);
 8000f02:	f240 1101 	movw	r1, #257	; 0x101
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <RTC_Config+0xb0>)
 8000f08:	f7ff fd1c 	bl	8000944 <LL_RTC_SetSynchPrescaler>
			LL_RTC_DisableInitMode(RTC);
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <RTC_Config+0xb0>)
 8000f0e:	f7ff fcf7 	bl	8000900 <LL_RTC_DisableInitMode>
			while(LL_RTC_IsActiveFlag_INIT(RTC));
 8000f12:	bf00      	nop
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <RTC_Config+0xb0>)
 8000f16:	f7ff fdce 	bl	8000ab6 <LL_RTC_IsActiveFlag_INIT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f9      	bne.n	8000f14 <RTC_Config+0x70>
			LL_RTC_ClearFlag_RS(RTC);
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <RTC_Config+0xb0>)
 8000f22:	f7ff fdee 	bl	8000b02 <LL_RTC_ClearFlag_RS>
			while(!LL_RTC_IsActiveFlag_RS(RTC));
 8000f26:	bf00      	nop
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <RTC_Config+0xb0>)
 8000f2a:	f7ff fdd7 	bl	8000adc <LL_RTC_IsActiveFlag_RS>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f9      	beq.n	8000f28 <RTC_Config+0x84>
			LL_RTC_EnableWriteProtection(RTC);
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <RTC_Config+0xb0>)
 8000f36:	f7ff fd1a 	bl	800096e <LL_RTC_EnableWriteProtection>
			expe=1;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <RTC_Config+0xb4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <RTC_Config+0xb4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <RTC_Config+0xb0>)
 8000f4a:	f7ff fd73 	bl	8000a34 <LL_RTC_BAK_SetRegister>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40002800 	.word	0x40002800
 8000f58:	20000000 	.word	0x20000000

08000f5c <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
void SysTick_Handler(void)
	{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f68:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 5*expe))
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dd0b      	ble.n	8000f8a <SysTick_Handler+0x2e>
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SysTick_Handler+0x90>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	441a      	add	r2, r3
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db02      	blt.n	8000f8a <SysTick_Handler+0x2e>
			LED_GREEN(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff f9e7 	bl	8000358 <LED_GREEN>

		if ((counter> 5*expe) && (counter<200))
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <SysTick_Handler+0x90>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	441a      	add	r2, r3
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	da06      	bge.n	8000faa <SysTick_Handler+0x4e>
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8000fa2:	dc02      	bgt.n	8000faa <SysTick_Handler+0x4e>
			LED_GREEN(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff f9d7 	bl	8000358 <LED_GREEN>

		if (counter>200)
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2bc8      	cmp	r3, #200	; 0xc8
 8000fb0:	dd02      	ble.n	8000fb8 <SysTick_Handler+0x5c>
			counter=0;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000fb8:	f7ff f9e4 	bl	8000384 <BLUE_BUTTON>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <SysTick_Handler+0x6c>
			bluemode=1;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <SysTick_Handler+0x94>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]


	  /* USER CODE END SysTick_IRQn 1 */

	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */
		if (counter%2)
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <SysTick_Handler+0x8c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <SysTick_Handler+0x80>
			PWM_50Hz(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff f9e5 	bl	80003a4 <PWM_50Hz>
			PWM_50Hz(0);

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000fda:	e002      	b.n	8000fe2 <SysTick_Handler+0x86>
			PWM_50Hz(0);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff f9e1 	bl	80003a4 <PWM_50Hz>
	}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000028 	.word	0x20000028
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000024 	.word	0x20000024

08000ff4 <RTC_wakeup_init>:

//----------------------------------------------------------------------
	// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init( int delay )
	{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection( RTC );
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <RTC_wakeup_init+0x54>)
 8000ffe:	f7ff fcc3 	bl	8000988 <LL_RTC_DisableWriteProtection>
	LL_RTC_WAKEUP_Disable( RTC );
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <RTC_wakeup_init+0x54>)
 8001004:	f7ff fce0 	bl	80009c8 <LL_RTC_WAKEUP_Disable>
	while	( !LL_RTC_IsActiveFlag_WUTW( RTC ) )
 8001008:	bf00      	nop
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <RTC_wakeup_init+0x54>)
 800100c:	f7ff fd8b 	bl	8000b26 <LL_RTC_IsActiveFlag_WUTW>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f9      	beq.n	800100a <RTC_wakeup_init+0x16>
		{ }
	// connecter le timer a l'horloge 1Hz de la RTC
	LL_RTC_WAKEUP_SetClock( RTC, LL_RTC_WAKEUPCLOCK_CKSPRE );
 8001016:	2104      	movs	r1, #4
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <RTC_wakeup_init+0x54>)
 800101a:	f7ff fce5 	bl	80009e8 <LL_RTC_WAKEUP_SetClock>

	// fixer la duree de temporisation
	LL_RTC_WAKEUP_SetAutoReload( RTC, delay );	// 16 bits
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4619      	mov	r1, r3
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <RTC_wakeup_init+0x54>)
 8001024:	f7ff fcf3 	bl	8000a0e <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_ClearFlag_WUT(RTC);
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <RTC_wakeup_init+0x54>)
 800102a:	f7ff fd33 	bl	8000a94 <LL_RTC_ClearFlag_WUT>
	LL_RTC_EnableIT_WUT(RTC);
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <RTC_wakeup_init+0x54>)
 8001030:	f7ff fd8c 	bl	8000b4c <LL_RTC_EnableIT_WUT>
	LL_RTC_WAKEUP_Enable(RTC);
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <RTC_wakeup_init+0x54>)
 8001036:	f7ff fcb7 	bl	80009a8 <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableWriteProtection(RTC);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <RTC_wakeup_init+0x54>)
 800103c:	f7ff fc97 	bl	800096e <LL_RTC_EnableWriteProtection>
	}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40002800 	.word	0x40002800

0800104c <RTC_wakeup_init_from_standby_or_shutdown>:
//----------------------------------------------------------------------
	// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
	// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
	// delay se configure en seconde à condition que l'horloge du wake up timer soit à 1Hz comme la RTC
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
	{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffcd 	bl	8000ff4 <RTC_wakeup_init>
	// enable the Internal Wake-up line
	LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 800105a:	f7ff fc41 	bl	80008e0 <LL_PWR_EnableInternWU>
	}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <RTC_wakeup_init_from_stop>:
	// le contenu de la RAM et des registres étant préservé, le MPU
	// reprend l'execution après l'instruction WFI

//----------------------------------------------------------------------
void RTC_wakeup_init_from_stop( int delay )
	{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffc0 	bl	8000ff4 <RTC_wakeup_init>
	//EXTI->PR1&=~(1<<22);
	// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
	LL_EXTI_EnableIT_0_31( LL_EXTI_LINE_20 );
 8001074:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001078:	f7ff fd98 	bl	8000bac <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31( LL_EXTI_LINE_20 );
 800107c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001080:	f7ff fda6 	bl	8000bd0 <LL_EXTI_EnableRisingTrig_0_31>
	// valider l'interrupt chez NVIC
	NVIC_SetPriority( RTC_WKUP_IRQn, 1 );
 8001084:	2101      	movs	r1, #1
 8001086:	2003      	movs	r0, #3
 8001088:	f7ff f9c2 	bl	8000410 <__NVIC_SetPriority>
	NVIC_EnableIRQ( RTC_WKUP_IRQn );
 800108c:	2003      	movs	r0, #3
 800108e:	f7ff f9a1 	bl	80003d4 <__NVIC_EnableIRQ>
	}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <RTC_WKUP_IRQHandler>:

//----------------------------------------------------------------------
	// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
	{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 800109e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010a2:	f7ff fda7 	bl	8000bf4 <LL_EXTI_ClearFlag_0_31>

	}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <Init_Low_Power_Mode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */

void Init_Low_Power_Mode(uint32_t LowPowerMode){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	if ((LowPowerMode == LL_PWR_MODE_STOP0) || (LowPowerMode == LL_PWR_MODE_STOP1) || (LowPowerMode == LL_PWR_MODE_STOP2)){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <Init_Low_Power_Mode+0x1a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d002      	beq.n	80010c6 <Init_Low_Power_Mode+0x1a>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d105      	bne.n	80010d2 <Init_Low_Power_Mode+0x26>
		RTC_wakeup_init_from_stop(20);
 80010c6:	2014      	movs	r0, #20
 80010c8:	f7ff ffcd 	bl	8001066 <RTC_wakeup_init_from_stop>
		// Disable le timer systick
		SysTick->CTRL=0;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <Init_Low_Power_Mode+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

	}

	if ((LowPowerMode == LL_PWR_MODE_STANDBY) || (LowPowerMode == LL_PWR_MODE_SHUTDOWN)){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d002      	beq.n	80010de <Init_Low_Power_Mode+0x32>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d102      	bne.n	80010e4 <Init_Low_Power_Mode+0x38>
			RTC_wakeup_init_from_standby_or_shutdown(20);
 80010de:	2014      	movs	r0, #20
 80010e0:	f7ff ffb4 	bl	800104c <RTC_wakeup_init_from_standby_or_shutdown>
		}



}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <Set_Low_Power_Mode>:

void Set_Low_Power_Mode(uint32_t LowPowerMode){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	// Activate the low power mode desired

	// set the SLEEPDEEP bit
		LL_LPM_EnableDeepSleep();
 80010f8:	f7ff fd48 	bl	8000b8c <LL_LPM_EnableDeepSleep>
	// Set LPMS in the PWR_CR1 register
		LL_PWR_SetPowerMode(LowPowerMode);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fbdb 	bl	80008b8 <LL_PWR_SetPowerMode>




}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <HardFault_Handler+0x4>

0800111e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <BusFault_Handler+0x4>

0800112a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <UsageFault_Handler+0x4>

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SystemInit+0x64>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <SystemInit+0x64>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <SystemInit+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <SystemInit+0x68>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <SystemInit+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <SystemInit+0x68>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <SystemInit+0x68>)
 8001178:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800117c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001180:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <SystemInit+0x68>)
 8001184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001188:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <SystemInit+0x68>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <SystemInit+0x68>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <SystemInit+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SystemInit+0x64>)
 800119e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a2:	609a      	str	r2, [r3, #8]
#endif
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	40021000 	.word	0x40021000

080011b8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	2302      	movs	r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 80011d6:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e005      	b.n	80011fe <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80011fe:	4a46      	ldr	r2, [pc, #280]	; (8001318 <SystemCoreClockUpdate+0x160>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d865      	bhi.n	80012e0 <SystemCoreClockUpdate+0x128>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <SystemCoreClockUpdate+0x64>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001251 	.word	0x08001251
 8001220:	080012e1 	.word	0x080012e1
 8001224:	080012e1 	.word	0x080012e1
 8001228:	080012e1 	.word	0x080012e1
 800122c:	08001259 	.word	0x08001259
 8001230:	080012e1 	.word	0x080012e1
 8001234:	080012e1 	.word	0x080012e1
 8001238:	080012e1 	.word	0x080012e1
 800123c:	08001261 	.word	0x08001261
 8001240:	080012e1 	.word	0x080012e1
 8001244:	080012e1 	.word	0x080012e1
 8001248:	080012e1 	.word	0x080012e1
 800124c:	08001269 	.word	0x08001269
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001250:	4a32      	ldr	r2, [pc, #200]	; (800131c <SystemCoreClockUpdate+0x164>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	6013      	str	r3, [r2, #0]
      break;
 8001256:	e047      	b.n	80012e8 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <SystemCoreClockUpdate+0x164>)
 800125a:	4a31      	ldr	r2, [pc, #196]	; (8001320 <SystemCoreClockUpdate+0x168>)
 800125c:	601a      	str	r2, [r3, #0]
      break;
 800125e:	e043      	b.n	80012e8 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <SystemCoreClockUpdate+0x164>)
 8001262:	4a30      	ldr	r2, [pc, #192]	; (8001324 <SystemCoreClockUpdate+0x16c>)
 8001264:	601a      	str	r2, [r3, #0]
      break;
 8001266:	e03f      	b.n	80012e8 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	3301      	adds	r3, #1
 800127e:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d002      	beq.n	800128c <SystemCoreClockUpdate+0xd4>
 8001286:	2b03      	cmp	r3, #3
 8001288:	d006      	beq.n	8001298 <SystemCoreClockUpdate+0xe0>
 800128a:	e00b      	b.n	80012a4 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <SystemCoreClockUpdate+0x168>)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	613b      	str	r3, [r7, #16]
          break;
 8001296:	e00b      	b.n	80012b0 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <SystemCoreClockUpdate+0x16c>)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	613b      	str	r3, [r7, #16]
          break;
 80012a2:	e005      	b.n	80012b0 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ac:	613b      	str	r3, [r7, #16]
          break;
 80012ae:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	0e5b      	lsrs	r3, r3, #25
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	3301      	adds	r3, #1
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <SystemCoreClockUpdate+0x164>)
 80012dc:	6013      	str	r3, [r2, #0]
      break;
 80012de:	e003      	b.n	80012e8 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <SystemCoreClockUpdate+0x164>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	6013      	str	r3, [r2, #0]
      break;
 80012e6:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <SystemCoreClockUpdate+0x15c>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <SystemCoreClockUpdate+0x170>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemCoreClockUpdate+0x164>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <SystemCoreClockUpdate+0x164>)
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	0800150c 	.word	0x0800150c
 800131c:	20000004 	.word	0x20000004
 8001320:	00f42400 	.word	0x00f42400
 8001324:	007a1200 	.word	0x007a1200
 8001328:	080014fc 	.word	0x080014fc

0800132c <Reset_Handler>:
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopForever+0x2>
 8001330:	f7ff ff0c 	bl	800114c <SystemInit>
 8001334:	2100      	movs	r1, #0
 8001336:	e003      	b.n	8001340 <LoopCopyDataInit>

08001338 <CopyDataInit>:
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <LoopForever+0x6>)
 800133a:	585b      	ldr	r3, [r3, r1]
 800133c:	5043      	str	r3, [r0, r1]
 800133e:	3104      	adds	r1, #4

08001340 <LoopCopyDataInit>:
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <LoopForever+0xa>)
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <LoopForever+0xe>)
 8001344:	1842      	adds	r2, r0, r1
 8001346:	429a      	cmp	r2, r3
 8001348:	d3f6      	bcc.n	8001338 <CopyDataInit>
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopForever+0x12>)
 800134c:	e002      	b.n	8001354 <LoopFillZerobss>

0800134e <FillZerobss>:
 800134e:	2300      	movs	r3, #0
 8001350:	f842 3b04 	str.w	r3, [r2], #4

08001354 <LoopFillZerobss>:
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LoopForever+0x16>)
 8001356:	429a      	cmp	r2, r3
 8001358:	d3f9      	bcc.n	800134e <FillZerobss>
 800135a:	f000 f89f 	bl	800149c <__libc_init_array>
 800135e:	f7ff fc59 	bl	8000c14 <main>

08001362 <LoopForever>:
 8001362:	e7fe      	b.n	8001362 <LoopForever>
 8001364:	20018000 	.word	0x20018000
 8001368:	08001544 	.word	0x08001544
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000008 	.word	0x20000008
 8001378:	2000002c 	.word	0x2000002c

0800137c <ADC1_2_IRQHandler>:
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>

0800137e <LL_RTC_EnableInitMode>:
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800138c:	60da      	str	r2, [r3, #12]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_RTC_IsActiveFlag_INIT>:
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b40      	cmp	r3, #64	; 0x40
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_SYSTICK_IsActiveCounterFlag>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80013f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffcd 	bl	800139a <LL_RTC_IsActiveFlag_INIT>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11e      	bne.n	8001444 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb9 	bl	800137e <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffc4 	bl	800139a <LL_RTC_IsActiveFlag_INIT>
 8001412:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001414:	e010      	b.n	8001438 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001416:	f7ff ffd3 	bl	80013c0 <LL_SYSTICK_IsActiveCounterFlag>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	d102      	bne.n	8001426 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3b01      	subs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb7 	bl	800139a <LL_RTC_IsActiveFlag_INIT>
 800142c:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <LL_RTC_EnterInitMode+0x5c>
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1e8      	bne.n	8001416 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8001444:	7dfb      	ldrb	r3, [r7, #23]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <LL_InitTick+0x30>)
 8001464:	3b01      	subs	r3, #1
 8001466:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <LL_InitTick+0x30>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <LL_InitTick+0x30>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e010 	.word	0xe000e010

08001484 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 100U);
 800148c:	2164      	movs	r1, #100	; 0x64
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffde 	bl	8001450 <LL_InitTick>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <__libc_init_array>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	4e0d      	ldr	r6, [pc, #52]	; (80014d4 <__libc_init_array+0x38>)
 80014a0:	4c0d      	ldr	r4, [pc, #52]	; (80014d8 <__libc_init_array+0x3c>)
 80014a2:	1ba4      	subs	r4, r4, r6
 80014a4:	10a4      	asrs	r4, r4, #2
 80014a6:	2500      	movs	r5, #0
 80014a8:	42a5      	cmp	r5, r4
 80014aa:	d109      	bne.n	80014c0 <__libc_init_array+0x24>
 80014ac:	4e0b      	ldr	r6, [pc, #44]	; (80014dc <__libc_init_array+0x40>)
 80014ae:	4c0c      	ldr	r4, [pc, #48]	; (80014e0 <__libc_init_array+0x44>)
 80014b0:	f000 f818 	bl	80014e4 <_init>
 80014b4:	1ba4      	subs	r4, r4, r6
 80014b6:	10a4      	asrs	r4, r4, #2
 80014b8:	2500      	movs	r5, #0
 80014ba:	42a5      	cmp	r5, r4
 80014bc:	d105      	bne.n	80014ca <__libc_init_array+0x2e>
 80014be:	bd70      	pop	{r4, r5, r6, pc}
 80014c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014c4:	4798      	blx	r3
 80014c6:	3501      	adds	r5, #1
 80014c8:	e7ee      	b.n	80014a8 <__libc_init_array+0xc>
 80014ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014ce:	4798      	blx	r3
 80014d0:	3501      	adds	r5, #1
 80014d2:	e7f2      	b.n	80014ba <__libc_init_array+0x1e>
 80014d4:	0800153c 	.word	0x0800153c
 80014d8:	0800153c 	.word	0x0800153c
 80014dc:	0800153c 	.word	0x0800153c
 80014e0:	08001540 	.word	0x08001540

080014e4 <_init>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	bf00      	nop
 80014e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ea:	bc08      	pop	{r3}
 80014ec:	469e      	mov	lr, r3
 80014ee:	4770      	bx	lr

080014f0 <_fini>:
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	bf00      	nop
 80014f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f6:	bc08      	pop	{r3}
 80014f8:	469e      	mov	lr, r3
 80014fa:	4770      	bx	lr
