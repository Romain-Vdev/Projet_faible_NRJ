
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000cec  08000cec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d2c  08000d2c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000d2c  08000d2c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d2c  08000d2c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08000d3c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d3c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002691  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000789  00000000  00000000  000226c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000358  00000000  00000000  00022e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000300  00000000  00000000  000231b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e60e  00000000  00000000  000234b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000022d4  00000000  00000000  00041abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab498  00000000  00000000  00043d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef22a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c28  00000000  00000000  000ef2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000cd4 	.word	0x08000cd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000cd4 	.word	0x08000cd4

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
#define LED_PIN LL_GPIO_PIN_5
#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13

void GPIO_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Green LED (user LED) - PA5
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Blue button - PC13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <GPIO_init+0x38>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	48000800 	.word	0x48000800

08000340 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
if	( val )
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <LED_GREEN+0x1a>
	LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 800034e:	2120      	movs	r1, #32
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f7ff ffba 	bl	80002cc <LL_GPIO_SetOutputPin>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}
 8000358:	e004      	b.n	8000364 <LED_GREEN+0x24>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f7ff ffc2 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <BLUE_BUTTON+0x20>)
 8000376:	f7ff ff94 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800

08000390 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800039c:	4907      	ldr	r1, [pc, #28]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ae:	68fb      	ldr	r3, [r7, #12]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <LL_RCC_LSE_Enable+0x20>)
 80003c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <LL_RCC_LSE_Enable+0x20>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <LL_RCC_LSE_IsReady+0x24>)
 80003ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d101      	bne.n	80003fa <LL_RCC_LSE_IsReady+0x16>
 80003f6:	2301      	movs	r3, #1
 80003f8:	e000      	b.n	80003fc <LL_RCC_LSE_IsReady+0x18>
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <LL_RCC_MSI_Enable+0x1c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <LL_RCC_MSI_Enable+0x1c>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <LL_RCC_MSI_IsReady+0x20>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	2b02      	cmp	r3, #2
 800043a:	d101      	bne.n	8000440 <LL_RCC_MSI_IsReady+0x14>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_RCC_MSI_IsReady+0x16>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000

08000450 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_RCC_SetSysClkSource+0x24>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f023 0203 	bic.w	r2, r3, #3
 8000480:	4904      	ldr	r1, [pc, #16]	; (8000494 <LL_RCC_SetSysClkSource+0x24>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4313      	orrs	r3, r2
 8000486:	608b      	str	r3, [r1, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <LL_RCC_GetSysClkSource+0x18>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	f003 030c 	and.w	r3, r3, #12
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004c4:	4904      	ldr	r1, [pc, #16]	; (80004d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	608b      	str	r3, [r1, #8]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004ec:	4904      	ldr	r1, [pc, #16]	; (8000500 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	608b      	str	r3, [r1, #8]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000

08000504 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_RCC_SetAPB2Prescaler+0x24>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	608b      	str	r3, [r1, #8]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800053c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800055c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <LL_RCC_PLL_Enable+0x1c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <LL_RCC_PLL_Enable+0x1c>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_RCC_PLL_Disable+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <LL_RCC_PLL_Disable+0x1c>)
 800059e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <LL_RCC_PLL_IsReady+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80005c4:	d101      	bne.n	80005ca <LL_RCC_PLL_IsReady+0x16>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_RCC_PLL_IsReady+0x18>
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005ec:	68da      	ldr	r2, [r3, #12]
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	4311      	orrs	r1, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	0212      	lsls	r2, r2, #8
 80005fc:	4311      	orrs	r1, r2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	430a      	orrs	r2, r1
 8000602:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000604:	4313      	orrs	r3, r2
 8000606:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	f9ff808c 	.word	0xf9ff808c

0800061c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 8000646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_FLASH_SetLatency+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f023 0207 	bic.w	r2, r3, #7
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <LL_FLASH_SetLatency+0x24>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	600b      	str	r3, [r1, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40022000 	.word	0x40022000

08000684 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	600b      	str	r3, [r1, #0]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40007000 	.word	0x40007000

080006ac <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <LL_PWR_EnableBkUpAccess+0x1c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <LL_PWR_EnableBkUpAccess+0x1c>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40007000 	.word	0x40007000

080006cc <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	041b      	lsls	r3, r3, #16
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	611a      	str	r2, [r3, #16]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000706:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	22ff      	movs	r2, #255	; 0xff
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	22ca      	movs	r2, #202	; 0xca
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2253      	movs	r2, #83	; 0x53
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <main>:
void RTC_Config(void);



int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0



// config GPIO
GPIO_init();
 800075c:	f7ff fdd2 	bl	8000304 <GPIO_init>

// config RTC
RTC_Config();
 8000760:	f000 f8a6 	bl	80008b0 <RTC_Config>

// lecture de expe dans le backup register

/* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
if (expe==1)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <main+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d102      	bne.n	8000772 <main+0x1a>
	SystemClock_Config(); // fonction à appeler si expe == 1
 800076c:	f000 f832 	bl	80007d4 <SystemClock_Config>
 8000770:	e001      	b.n	8000776 <main+0x1e>
else
	SystemClock_Config_MSI_24Mhz();
 8000772:	f000 f863 	bl	800083c <SystemClock_Config_MSI_24Mhz>


// Fonction qui active la calibration MSI vs LSE en fonction de expe
Calibration_MSI_vs_LPE();
 8000776:	f000 f821 	bl	80007bc <Calibration_MSI_vs_LPE>

// init systick timer (tick period at 1 ms)
//LL_Init1msTick( SystemCoreClock );

// init systick timer (tick period at 10 ms)
LL_Init10msTick( SystemCoreClock );
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <main+0x60>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fa50 	bl	8000c24 <LL_Init10msTick>

while (1)  {
	if	( BLUE_BUTTON() )
 8000784:	f7ff fdf2 	bl	800036c <BLUE_BUTTON>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <main+0x3e>
		LED_GREEN(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fdd6 	bl	8000340 <LED_GREEN>
 8000794:	e7f6      	b.n	8000784 <main+0x2c>
	else {
		LED_GREEN(0);
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fdd2 	bl	8000340 <LED_GREEN>
		LL_mDelay(950);
 800079c:	f240 30b6 	movw	r0, #950	; 0x3b6
 80007a0:	f000 fa4e 	bl	8000c40 <LL_mDelay>
		LED_GREEN(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff fdcb 	bl	8000340 <LED_GREEN>
		LL_mDelay(50);
 80007aa:	2032      	movs	r0, #50	; 0x32
 80007ac:	f000 fa48 	bl	8000c40 <LL_mDelay>
	if	( BLUE_BUTTON() )
 80007b0:	e7e8      	b.n	8000784 <main+0x2c>
 80007b2:	bf00      	nop
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000004 	.word	0x20000004

080007bc <Calibration_MSI_vs_LPE>:
	  * @brief Active le mécanisme dit "calibration" qui utilise une sorte de PLL asservie à l'oscillateur LSE

	  * @param  None
	  * @retval None
	  */
	void Calibration_MSI_vs_LPE(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
		// calibration active par défaut quand expe vaut 5,6,7 ou 8
		if (expe >= 5)
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <Calibration_MSI_vs_LPE+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	dd01      	ble.n	80007cc <Calibration_MSI_vs_LPE+0x10>
			LL_RCC_MSI_EnablePLLMode();
 80007c8:	f7ff fe42 	bl	8000450 <LL_RCC_MSI_EnablePLLMode>

	}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000

080007d4 <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80007d8:	2004      	movs	r0, #4
 80007da:	f7ff ff3f 	bl	800065c <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 80007de:	f7ff fe15 	bl	800040c <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 80007e2:	bf00      	nop
 80007e4:	f7ff fe22 	bl	800042c <LL_RCC_MSI_IsReady>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d1fa      	bne.n	80007e4 <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80007ee:	2300      	movs	r3, #0
 80007f0:	2228      	movs	r2, #40	; 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fef1 	bl	80005dc <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 80007fa:	f7ff febb 	bl	8000574 <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 80007fe:	f7ff ff0d 	bl	800061c <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 8000802:	bf00      	nop
 8000804:	f7ff fed6 	bl	80005b4 <LL_RCC_PLL_IsReady>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d1fa      	bne.n	8000804 <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fe50 	bl	80004b4 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000814:	2003      	movs	r0, #3
 8000816:	f7ff fe2b 	bl	8000470 <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800081a:	bf00      	nop
 800081c:	f7ff fe3c 	bl	8000498 <LL_RCC_GetSysClkSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b0c      	cmp	r3, #12
 8000824:	d1fa      	bne.n	800081c <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fe58 	bl	80004dc <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fe69 	bl	8000504 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000832:	f000 f8f9 	bl	8000a28 <SystemCoreClockUpdate>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <SystemClock_Config_MSI_24Mhz+0x70>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d103      	bne.n	8000850 <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ff07 	bl	800065c <LL_FLASH_SetLatency>
 800084e:	e002      	b.n	8000856 <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff ff03 	bl	800065c <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 8000856:	f7ff fdd9 	bl	800040c <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 800085a:	bf00      	nop
 800085c:	f7ff fde6 	bl	800042c <LL_RCC_MSI_IsReady>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d1fa      	bne.n	800085c <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 8000866:	f7ff fe95 	bl	8000594 <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 800086a:	f7ff fee7 	bl	800063c <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <SystemClock_Config_MSI_24Mhz+0x70>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d003      	beq.n	800087e <SystemClock_Config_MSI_24Mhz+0x42>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000876:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800087a:	f7ff ff03 	bl	8000684 <LL_PWR_SetRegulVoltageScaling>


/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe18 	bl	80004b4 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000884:	2003      	movs	r0, #3
 8000886:	f7ff fdf3 	bl	8000470 <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800088a:	bf00      	nop
 800088c:	f7ff fe04 	bl	8000498 <LL_RCC_GetSysClkSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b0c      	cmp	r3, #12
 8000894:	d1fa      	bne.n	800088c <SystemClock_Config_MSI_24Mhz+0x50>
	{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fe20 	bl	80004dc <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe31 	bl	8000504 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 80008a2:	f000 f8c1 	bl	8000a28 <SystemCoreClockUpdate>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	if (LL_RCC_LSE_IsReady()) { // cas du démarrage à chaud
 80008b4:	f7ff fd96 	bl	80003e4 <LL_RCC_LSE_IsReady>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d006      	beq.n	80008cc <RTC_Config+0x1c>
		// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
		LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 80008be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008c2:	f7ff fd65 	bl	8000390 <LL_APB1_GRP1_EnableClock>
		LL_PWR_EnableBkUpAccess();
 80008c6:	f7ff fef1 	bl	80006ac <LL_PWR_EnableBkUpAccess>
		LL_RTC_EnableWriteProtection(RTC);



	}
}
 80008ca:	e013      	b.n	80008f4 <RTC_Config+0x44>
		LL_RCC_LSE_Enable();
 80008cc:	f7ff fd78 	bl	80003c0 <LL_RCC_LSE_Enable>
		LL_RCC_ForceBackupDomainReset();
 80008d0:	f7ff fe2c 	bl	800052c <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();
 80008d4:	f7ff fe3c 	bl	8000550 <LL_RCC_ReleaseBackupDomainReset>
		LL_RTC_DisableWriteProtection(RTC);
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <RTC_Config+0x48>)
 80008da:	f7ff ff2d 	bl	8000738 <LL_RTC_DisableWriteProtection>
		LL_RTC_SetAsynchPrescaler(RTC,1);
 80008de:	2101      	movs	r1, #1
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <RTC_Config+0x48>)
 80008e2:	f7ff fef3 	bl	80006cc <LL_RTC_SetAsynchPrescaler>
		LL_RTC_SetSynchPrescaler(RTC,1);
 80008e6:	2101      	movs	r1, #1
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <RTC_Config+0x48>)
 80008ea:	f7ff ff03 	bl	80006f4 <LL_RTC_SetSynchPrescaler>
		LL_RTC_EnableWriteProtection(RTC);
 80008ee:	4802      	ldr	r0, [pc, #8]	; (80008f8 <RTC_Config+0x48>)
 80008f0:	f7ff ff15 	bl	800071e <LL_RTC_EnableWriteProtection>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40002800 	.word	0x40002800

080008fc <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
	void SysTick_Handler(void)
	{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <SysTick_Handler+0x70>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <SysTick_Handler+0x70>)
 8000908:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 50*expe))
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <SysTick_Handler+0x70>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dd0b      	ble.n	800092a <SysTick_Handler+0x2e>
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <SysTick_Handler+0x74>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2232      	movs	r2, #50	; 0x32
 8000918:	fb02 f203 	mul.w	r2, r2, r3
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <SysTick_Handler+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	db02      	blt.n	800092a <SysTick_Handler+0x2e>
			LED_GREEN(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fd0b 	bl	8000340 <LED_GREEN>

		if ((counter> 50*expe) && (counter<200))
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SysTick_Handler+0x74>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2232      	movs	r2, #50	; 0x32
 8000930:	fb02 f203 	mul.w	r2, r2, r3
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <SysTick_Handler+0x70>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	da06      	bge.n	800094a <SysTick_Handler+0x4e>
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <SysTick_Handler+0x70>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2bc7      	cmp	r3, #199	; 0xc7
 8000942:	dc02      	bgt.n	800094a <SysTick_Handler+0x4e>
			LED_GREEN(0);
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fcfb 	bl	8000340 <LED_GREEN>

		if (counter>200)
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <SysTick_Handler+0x70>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2bc8      	cmp	r3, #200	; 0xc8
 8000950:	dd02      	ble.n	8000958 <SysTick_Handler+0x5c>
			counter=0;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <SysTick_Handler+0x70>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON()) // à regarder si c'est bien la détection repos->pressé
 8000958:	f7ff fd08 	bl	800036c <BLUE_BUTTON>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <SysTick_Handler+0x6c>
			bluemode=1;
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Handler+0x78>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000028 	.word	0x20000028
 8000970:	20000000 	.word	0x20000000
 8000974:	20000024 	.word	0x20000024

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <SystemInit+0x64>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <SystemInit+0x64>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <SystemInit+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <SystemInit+0x68>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <SystemInit+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <SystemInit+0x68>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <SystemInit+0x68>)
 80009e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <SystemInit+0x68>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SystemInit+0x68>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <SystemInit+0x68>)
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <SystemInit+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x64>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	40021000 	.word	0x40021000

08000a28 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	2302      	movs	r3, #2
 8000a44:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8000a46:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d107      	bne.n	8000a62 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000a52:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e005      	b.n	8000a6e <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <SystemCoreClockUpdate+0x160>)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a78:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b0c      	cmp	r3, #12
 8000a82:	d865      	bhi.n	8000b50 <SystemCoreClockUpdate+0x128>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <SystemCoreClockUpdate+0x64>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000ac1 	.word	0x08000ac1
 8000a90:	08000b51 	.word	0x08000b51
 8000a94:	08000b51 	.word	0x08000b51
 8000a98:	08000b51 	.word	0x08000b51
 8000a9c:	08000ac9 	.word	0x08000ac9
 8000aa0:	08000b51 	.word	0x08000b51
 8000aa4:	08000b51 	.word	0x08000b51
 8000aa8:	08000b51 	.word	0x08000b51
 8000aac:	08000ad1 	.word	0x08000ad1
 8000ab0:	08000b51 	.word	0x08000b51
 8000ab4:	08000b51 	.word	0x08000b51
 8000ab8:	08000b51 	.word	0x08000b51
 8000abc:	08000ad9 	.word	0x08000ad9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ac0:	4a32      	ldr	r2, [pc, #200]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	6013      	str	r3, [r2, #0]
      break;
 8000ac6:	e047      	b.n	8000b58 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <SystemCoreClockUpdate+0x168>)
 8000acc:	601a      	str	r2, [r3, #0]
      break;
 8000ace:	e043      	b.n	8000b58 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000ad2:	4a30      	ldr	r2, [pc, #192]	; (8000b94 <SystemCoreClockUpdate+0x16c>)
 8000ad4:	601a      	str	r2, [r3, #0]
      break;
 8000ad6:	e03f      	b.n	8000b58 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d002      	beq.n	8000afc <SystemCoreClockUpdate+0xd4>
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d006      	beq.n	8000b08 <SystemCoreClockUpdate+0xe0>
 8000afa:	e00b      	b.n	8000b14 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <SystemCoreClockUpdate+0x168>)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	613b      	str	r3, [r7, #16]
          break;
 8000b06:	e00b      	b.n	8000b20 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <SystemCoreClockUpdate+0x16c>)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	613b      	str	r3, [r7, #16]
          break;
 8000b12:	e005      	b.n	8000b20 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	613b      	str	r3, [r7, #16]
          break;
 8000b1e:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	0e5b      	lsrs	r3, r3, #25
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000b4c:	6013      	str	r3, [r2, #0]
      break;
 8000b4e:	e003      	b.n	8000b58 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	6013      	str	r3, [r2, #0]
      break;
 8000b56:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <SystemCoreClockUpdate+0x15c>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <SystemCoreClockUpdate+0x170>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <SystemCoreClockUpdate+0x164>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	08000cfc 	.word	0x08000cfc
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	00f42400 	.word	0x00f42400
 8000b94:	007a1200 	.word	0x007a1200
 8000b98:	08000cec 	.word	0x08000cec

08000b9c <Reset_Handler>:
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>
 8000ba0:	f7ff ff0c 	bl	80009bc <SystemInit>
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LoopForever+0x6>)
 8000baa:	585b      	ldr	r3, [r3, r1]
 8000bac:	5043      	str	r3, [r0, r1]
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <LoopForever+0xa>)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopForever+0xe>)
 8000bb4:	1842      	adds	r2, r0, r1
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LoopForever+0x16>)
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>
 8000bca:	f000 f85f 	bl	8000c8c <__libc_init_array>
 8000bce:	f7ff fdc3 	bl	8000758 <main>

08000bd2 <LoopForever>:
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
 8000bd4:	20018000 	.word	0x20018000
 8000bd8:	08000d34 	.word	0x08000d34
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000008 	.word	0x20000008
 8000be8:	2000002c 	.word	0x2000002c

08000bec <ADC1_2_IRQHandler>:
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <LL_InitTick+0x30>)
 8000c04:	3b01      	subs	r3, #1
 8000c06:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <LL_InitTick+0x30>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <LL_InitTick+0x30>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 10000U);
 8000c2c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffdd 	bl	8000bf0 <LL_InitTick>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <LL_mDelay+0x48>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000c52:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c5a:	d00c      	beq.n	8000c76 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8000c62:	e008      	b.n	8000c76 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <LL_mDelay+0x48>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f3      	bne.n	8000c64 <LL_mDelay+0x24>
    }
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <__libc_init_array>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4e0d      	ldr	r6, [pc, #52]	; (8000cc4 <__libc_init_array+0x38>)
 8000c90:	4c0d      	ldr	r4, [pc, #52]	; (8000cc8 <__libc_init_array+0x3c>)
 8000c92:	1ba4      	subs	r4, r4, r6
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	2500      	movs	r5, #0
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	d109      	bne.n	8000cb0 <__libc_init_array+0x24>
 8000c9c:	4e0b      	ldr	r6, [pc, #44]	; (8000ccc <__libc_init_array+0x40>)
 8000c9e:	4c0c      	ldr	r4, [pc, #48]	; (8000cd0 <__libc_init_array+0x44>)
 8000ca0:	f000 f818 	bl	8000cd4 <_init>
 8000ca4:	1ba4      	subs	r4, r4, r6
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	2500      	movs	r5, #0
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d105      	bne.n	8000cba <__libc_init_array+0x2e>
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb4:	4798      	blx	r3
 8000cb6:	3501      	adds	r5, #1
 8000cb8:	e7ee      	b.n	8000c98 <__libc_init_array+0xc>
 8000cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cbe:	4798      	blx	r3
 8000cc0:	3501      	adds	r5, #1
 8000cc2:	e7f2      	b.n	8000caa <__libc_init_array+0x1e>
 8000cc4:	08000d2c 	.word	0x08000d2c
 8000cc8:	08000d2c 	.word	0x08000d2c
 8000ccc:	08000d2c 	.word	0x08000d2c
 8000cd0:	08000d30 	.word	0x08000d30

08000cd4 <_init>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	bf00      	nop
 8000cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cda:	bc08      	pop	{r3}
 8000cdc:	469e      	mov	lr, r3
 8000cde:	4770      	bx	lr

08000ce0 <_fini>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	bf00      	nop
 8000ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce6:	bc08      	pop	{r3}
 8000ce8:	469e      	mov	lr, r3
 8000cea:	4770      	bx	lr
