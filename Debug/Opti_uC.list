
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dec  08000dec  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000dec  08000dec  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dec  08000dec  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  08000dfc  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000dfc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002728  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007ca  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000360  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00023290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f0bf  00000000  00000000  00023598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000229f  00000000  00000000  00042657  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab4e1  00000000  00000000  000448f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efdd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c58  00000000  00000000  000efe54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d94 	.word	0x08000d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000d94 	.word	0x08000d94

080001c8 <LL_AHB2_GRP1_EnableClock>:
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <GPIO_init+0x38>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	48000800 	.word	0x48000800

08000340 <LED_GREEN>:
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <LED_GREEN+0x1a>
 800034e:	2120      	movs	r1, #32
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f7ff ffba 	bl	80002cc <LL_GPIO_SetOutputPin>
 8000358:	e004      	b.n	8000364 <LED_GREEN+0x24>
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f7ff ffc2 	bl	80002e8 <LL_GPIO_ResetOutputPin>
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <BLUE_BUTTON>:
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <BLUE_BUTTON+0x20>)
 8000376:	f7ff ff94 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800

08000390 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800039c:	4907      	ldr	r1, [pc, #28]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ae:	68fb      	ldr	r3, [r7, #12]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <LL_RCC_LSE_Enable+0x20>)
 80003c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <LL_RCC_LSE_Enable+0x20>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <LL_RCC_MSI_Enable+0x1c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <LL_RCC_MSI_Enable+0x1c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_RCC_MSI_IsReady+0x20>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f003 0302 	and.w	r3, r3, #2
 8000410:	2b02      	cmp	r3, #2
 8000412:	d101      	bne.n	8000418 <LL_RCC_MSI_IsReady+0x14>
 8000414:	2301      	movs	r3, #1
 8000416:	e000      	b.n	800041a <LL_RCC_MSI_IsReady+0x16>
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <LL_RCC_SetSysClkSource+0x24>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f023 0203 	bic.w	r2, r3, #3
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <LL_RCC_SetSysClkSource+0x24>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	608b      	str	r3, [r1, #8]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <LL_RCC_GetSysClkSource+0x18>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f003 030c 	and.w	r3, r3, #12
}
 800047c:	4618      	mov	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800049c:	4904      	ldr	r1, [pc, #16]	; (80004b0 <LL_RCC_SetAHBPrescaler+0x24>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	608b      	str	r3, [r1, #8]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004c4:	4904      	ldr	r1, [pc, #16]	; (80004d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	608b      	str	r3, [r1, #8]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004ec:	4904      	ldr	r1, [pc, #16]	; (8000500 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	608b      	str	r3, [r1, #8]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000

08000504 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_RCC_ForceBackupDomainReset+0x20>)
 800050a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <LL_RCC_PLL_Enable+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <LL_RCC_PLL_Enable+0x1c>)
 8000556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <LL_RCC_PLL_Disable+0x1c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <LL_RCC_PLL_Disable+0x1c>)
 8000576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LL_RCC_PLL_IsReady+0x24>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800059c:	d101      	bne.n	80005a2 <LL_RCC_PLL_IsReady+0x16>
 800059e:	2301      	movs	r3, #1
 80005a0:	e000      	b.n	80005a4 <LL_RCC_PLL_IsReady+0x18>
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80005c8:	4013      	ands	r3, r2
 80005ca:	68f9      	ldr	r1, [r7, #12]
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	4311      	orrs	r1, r2
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0212      	lsls	r2, r2, #8
 80005d4:	4311      	orrs	r1, r2
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	430a      	orrs	r2, r1
 80005da:	4904      	ldr	r1, [pc, #16]	; (80005ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005dc:	4313      	orrs	r3, r2
 80005de:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000
 80005f0:	f9ff808c 	.word	0xf9ff808c

080005f4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800061e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LL_FLASH_SetLatency+0x24>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f023 0207 	bic.w	r2, r3, #7
 8000644:	4904      	ldr	r1, [pc, #16]	; (8000658 <LL_FLASH_SetLatency+0x24>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4313      	orrs	r3, r2
 800064a:	600b      	str	r3, [r1, #0]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40022000 	.word	0x40022000

0800065c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	600b      	str	r3, [r1, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40007000 	.word	0x40007000

08000684 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <LL_PWR_EnableBkUpAccess+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <LL_PWR_EnableBkUpAccess+0x1c>)
 800068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40007000 	.word	0x40007000

080006a4 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	041b      	lsls	r3, r3, #16
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	611a      	str	r2, [r3, #16]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80006de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	431a      	orrs	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	611a      	str	r2, [r3, #16]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	22ca      	movs	r2, #202	; 0xca
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2253      	movs	r2, #83	; 0x53
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3350      	adds	r3, #80	; 0x50
 8000744:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	4413      	add	r3, r2
 800074e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000762:	b480      	push	{r7}
 8000764:	b085      	sub	sp, #20
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3350      	adds	r3, #80	; 0x50
 8000774:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <main>:
void RTC_Config(void);



int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR1)==0){
 8000794:	2101      	movs	r1, #1
 8000796:	4824      	ldr	r0, [pc, #144]	; (8000828 <main+0x98>)
 8000798:	f7ff ffe3 	bl	8000762 <LL_RTC_BAK_GetRegister>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10f      	bne.n	80007c2 <main+0x32>
	LL_RTC_DisableWriteProtection(RTC);
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <main+0x98>)
 80007a4:	f7ff ffb4 	bl	8000710 <LL_RTC_DisableWriteProtection>
	LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0,1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2100      	movs	r1, #0
 80007ac:	481e      	ldr	r0, [pc, #120]	; (8000828 <main+0x98>)
 80007ae:	f7ff ffbf 	bl	8000730 <LL_RTC_BAK_SetRegister>
	LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR1,1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2101      	movs	r1, #1
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <main+0x98>)
 80007b8:	f7ff ffba 	bl	8000730 <LL_RTC_BAK_SetRegister>
	LL_RTC_EnableWriteProtection(RTC);
 80007bc:	481a      	ldr	r0, [pc, #104]	; (8000828 <main+0x98>)
 80007be:	f7ff ff9a 	bl	80006f6 <LL_RTC_EnableWriteProtection>
}
expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <main+0x98>)
 80007c6:	f7ff ffcc 	bl	8000762 <LL_RTC_BAK_GetRegister>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <main+0x9c>)
 80007d0:	601a      	str	r2, [r3, #0]
// config GPIO
GPIO_init();
 80007d2:	f7ff fd97 	bl	8000304 <GPIO_init>

// config RTC
RTC_Config();
 80007d6:	f000 f8a1 	bl	800091c <RTC_Config>

// lecture de expe dans le backup register

/* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
if (expe==1)
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <main+0x9c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d102      	bne.n	80007e8 <main+0x58>
	SystemClock_Config(); // fonction à appeler si expe == 1
 80007e2:	f000 f833 	bl	800084c <SystemClock_Config>
 80007e6:	e001      	b.n	80007ec <main+0x5c>
else
	SystemClock_Config_MSI_24Mhz();
 80007e8:	f000 f864 	bl	80008b4 <SystemClock_Config_MSI_24Mhz>


// Fonction qui active la calibration MSI vs LSE en fonction de expe
Calibration_MSI_vs_LPE();
 80007ec:	f000 f822 	bl	8000834 <Calibration_MSI_vs_LPE>

// init systick timer (tick period at 1 ms)
//LL_Init1msTick( SystemCoreClock );

// init systick timer (tick period at 10 ms)
LL_Init10msTick( SystemCoreClock );
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <main+0xa0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fa77 	bl	8000ce8 <LL_Init10msTick>

while (1)  {
	if	( BLUE_BUTTON() )
 80007fa:	f7ff fdb7 	bl	800036c <BLUE_BUTTON>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <main+0x7c>
		LED_GREEN(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fd9b 	bl	8000340 <LED_GREEN>
 800080a:	e7f6      	b.n	80007fa <main+0x6a>
	else {
		LED_GREEN(0);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fd97 	bl	8000340 <LED_GREEN>
		LL_mDelay(950);
 8000812:	f240 30b6 	movw	r0, #950	; 0x3b6
 8000816:	f000 fa73 	bl	8000d00 <LL_mDelay>
		LED_GREEN(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fd90 	bl	8000340 <LED_GREEN>
		LL_mDelay(50);
 8000820:	2032      	movs	r0, #50	; 0x32
 8000822:	f000 fa6d 	bl	8000d00 <LL_mDelay>
	if	( BLUE_BUTTON() )
 8000826:	e7e8      	b.n	80007fa <main+0x6a>
 8000828:	40002800 	.word	0x40002800
 800082c:	20000000 	.word	0x20000000
 8000830:	20000004 	.word	0x20000004

08000834 <Calibration_MSI_vs_LPE>:
	  * @brief Active le mécanisme dit "calibration" qui utilise une sorte de PLL asservie à l'oscillateur LSE

	  * @param  None
	  * @retval None
	  */
	void Calibration_MSI_vs_LPE(void){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
		// calibration active par défaut quand expe vaut 5,6,7 ou 8
		if (expe >= 5)
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <Calibration_MSI_vs_LPE+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b04      	cmp	r3, #4
 800083e:	dd01      	ble.n	8000844 <Calibration_MSI_vs_LPE+0x10>
			LL_RCC_MSI_EnablePLLMode();
 8000840:	f7ff fdf2 	bl	8000428 <LL_RCC_MSI_EnablePLLMode>

	}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000

0800084c <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff feef 	bl	8000634 <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 8000856:	f7ff fdc5 	bl	80003e4 <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 800085a:	bf00      	nop
 800085c:	f7ff fdd2 	bl	8000404 <LL_RCC_MSI_IsReady>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d1fa      	bne.n	800085c <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000866:	2300      	movs	r3, #0
 8000868:	2228      	movs	r2, #40	; 0x28
 800086a:	2100      	movs	r1, #0
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fea1 	bl	80005b4 <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 8000872:	f7ff fe6b 	bl	800054c <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 8000876:	f7ff febd 	bl	80005f4 <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 800087a:	bf00      	nop
 800087c:	f7ff fe86 	bl	800058c <LL_RCC_PLL_IsReady>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d1fa      	bne.n	800087c <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fe00 	bl	800048c <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800088c:	2003      	movs	r0, #3
 800088e:	f7ff fddb 	bl	8000448 <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000892:	bf00      	nop
 8000894:	f7ff fdec 	bl	8000470 <LL_RCC_GetSysClkSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b0c      	cmp	r3, #12
 800089c:	d1fa      	bne.n	8000894 <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fe08 	bl	80004b4 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fe19 	bl	80004dc <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 80008aa:	f000 f91f 	bl	8000aec <SystemCoreClockUpdate>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <SystemClock_Config_MSI_24Mhz+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d103      	bne.n	80008c8 <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff feb7 	bl	8000634 <LL_FLASH_SetLatency>
 80008c6:	e002      	b.n	80008ce <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f7ff feb3 	bl	8000634 <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 80008ce:	f7ff fd89 	bl	80003e4 <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 80008d2:	bf00      	nop
 80008d4:	f7ff fd96 	bl	8000404 <LL_RCC_MSI_IsReady>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d1fa      	bne.n	80008d4 <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 80008de:	f7ff fe45 	bl	800056c <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 80008e2:	f7ff fe97 	bl	8000614 <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <SystemClock_Config_MSI_24Mhz+0x64>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d003      	beq.n	80008f6 <SystemClock_Config_MSI_24Mhz+0x42>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80008ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008f2:	f7ff feb3 	bl	800065c <LL_PWR_SetRegulVoltageScaling>


/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fdc8 	bl	800048c <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f7ff fda3 	bl	8000448 <LL_RCC_SetSysClkSource>
//while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
	//{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fdd6 	bl	80004b4 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fde7 	bl	80004dc <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 800090e:	f000 f8ed 	bl	8000aec <SystemCoreClockUpdate>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000000 	.word	0x20000000

0800091c <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	if (((RCC->BDCR)&(RCC_BDCR_LSEON))==RCC_BDCR_LSEON) { // cas du démarrage à chaud
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <RTC_Config+0x5c>)
 8000922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b01      	cmp	r3, #1
 800092c:	d106      	bne.n	800093c <RTC_Config+0x20>
		// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
		LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 800092e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000932:	f7ff fd2d 	bl	8000390 <LL_APB1_GRP1_EnableClock>
		LL_PWR_EnableBkUpAccess();
 8000936:	f7ff fea5 	bl	8000684 <LL_PWR_EnableBkUpAccess>
		LL_RTC_SetSynchPrescaler(RTC,1);

		// réactive la protection en écriture du registre RTC
		LL_RTC_EnableWriteProtection(RTC);
	}
}
 800093a:	e01a      	b.n	8000972 <RTC_Config+0x56>
		LL_RCC_LSE_Enable();
 800093c:	f7ff fd40 	bl	80003c0 <LL_RCC_LSE_Enable>
		expe=READ_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <RTC_Config+0x5c>)
 8000942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <RTC_Config+0x60>)
 800094c:	6013      	str	r3, [r2, #0]
		LL_RCC_ForceBackupDomainReset();
 800094e:	f7ff fdd9 	bl	8000504 <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();
 8000952:	f7ff fde9 	bl	8000528 <LL_RCC_ReleaseBackupDomainReset>
		LL_RTC_DisableWriteProtection(RTC);
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <RTC_Config+0x64>)
 8000958:	f7ff feda 	bl	8000710 <LL_RTC_DisableWriteProtection>
		LL_RTC_SetAsynchPrescaler(RTC,1);
 800095c:	2101      	movs	r1, #1
 800095e:	4808      	ldr	r0, [pc, #32]	; (8000980 <RTC_Config+0x64>)
 8000960:	f7ff fea0 	bl	80006a4 <LL_RTC_SetAsynchPrescaler>
		LL_RTC_SetSynchPrescaler(RTC,1);
 8000964:	2101      	movs	r1, #1
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <RTC_Config+0x64>)
 8000968:	f7ff feb0 	bl	80006cc <LL_RTC_SetSynchPrescaler>
		LL_RTC_EnableWriteProtection(RTC);
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <RTC_Config+0x64>)
 800096e:	f7ff fec2 	bl	80006f6 <LL_RTC_EnableWriteProtection>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	20000000 	.word	0x20000000
 8000980:	40002800 	.word	0x40002800

08000984 <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
	void SysTick_Handler(void)
	{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <SysTick_Handler+0xa4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <SysTick_Handler+0xa4>)
 8000990:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 5*expe))
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SysTick_Handler+0xa4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	dd0b      	ble.n	80009b2 <SysTick_Handler+0x2e>
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <SysTick_Handler+0xa8>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	441a      	add	r2, r3
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <SysTick_Handler+0xa4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	db02      	blt.n	80009b2 <SysTick_Handler+0x2e>
			LED_GREEN(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fcc7 	bl	8000340 <LED_GREEN>

		if ((counter> 5*expe) && (counter<200))
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <SysTick_Handler+0xa8>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	441a      	add	r2, r3
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <SysTick_Handler+0xa4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	da06      	bge.n	80009d2 <SysTick_Handler+0x4e>
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <SysTick_Handler+0xa4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2bc7      	cmp	r3, #199	; 0xc7
 80009ca:	dc02      	bgt.n	80009d2 <SysTick_Handler+0x4e>
			LED_GREEN(0);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fcb7 	bl	8000340 <LED_GREEN>

		if (counter>200)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <SysTick_Handler+0xa4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2bc8      	cmp	r3, #200	; 0xc8
 80009d8:	dd02      	ble.n	80009e0 <SysTick_Handler+0x5c>
			counter=0;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <SysTick_Handler+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON() && !passed){ // à regarder si c'est bien la détection repos->pressé
 80009e0:	f7ff fcc4 	bl	800036c <BLUE_BUTTON>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d01b      	beq.n	8000a22 <SysTick_Handler+0x9e>
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <SysTick_Handler+0xac>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d117      	bne.n	8000a22 <SysTick_Handler+0x9e>
			bluemode=1;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <SysTick_Handler+0xb0>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
			expe++;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SysTick_Handler+0xa8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <SysTick_Handler+0xa8>)
 8000a00:	6013      	str	r3, [r2, #0]
			LL_RTC_DisableWriteProtection(RTC);
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <SysTick_Handler+0xb4>)
 8000a04:	f7ff fe84 	bl	8000710 <LL_RTC_DisableWriteProtection>
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SysTick_Handler+0xa8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <SysTick_Handler+0xb4>)
 8000a12:	f7ff fe8d 	bl	8000730 <LL_RTC_BAK_SetRegister>
			LL_RTC_EnableWriteProtection(RTC);
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <SysTick_Handler+0xb4>)
 8000a18:	f7ff fe6d 	bl	80006f6 <LL_RTC_EnableWriteProtection>
			passed=1;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Handler+0xac>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000002c 	.word	0x2000002c
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000028 	.word	0x20000028
 8000a34:	20000024 	.word	0x20000024
 8000a38:	40002800 	.word	0x40002800

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SystemInit>:
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <SystemInit+0x64>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <SystemInit+0x64>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <SystemInit+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <SystemInit+0x68>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <SystemInit+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <SystemInit+0x68>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <SystemInit+0x68>)
 8000aac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ab0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <SystemInit+0x68>)
 8000ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SystemInit+0x68>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <SystemInit+0x68>)
 8000ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <SystemInit+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x64>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	40021000 	.word	0x40021000

08000aec <SystemCoreClockUpdate>:
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	2302      	movs	r3, #2
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	2302      	movs	r3, #2
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d107      	bne.n	8000b26 <SystemCoreClockUpdate+0x3a>
 8000b16:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e005      	b.n	8000b32 <SystemCoreClockUpdate+0x46>
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <SystemCoreClockUpdate+0x160>)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b0c      	cmp	r3, #12
 8000b46:	d865      	bhi.n	8000c14 <SystemCoreClockUpdate+0x128>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <SystemCoreClockUpdate+0x64>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b85 	.word	0x08000b85
 8000b54:	08000c15 	.word	0x08000c15
 8000b58:	08000c15 	.word	0x08000c15
 8000b5c:	08000c15 	.word	0x08000c15
 8000b60:	08000b8d 	.word	0x08000b8d
 8000b64:	08000c15 	.word	0x08000c15
 8000b68:	08000c15 	.word	0x08000c15
 8000b6c:	08000c15 	.word	0x08000c15
 8000b70:	08000b95 	.word	0x08000b95
 8000b74:	08000c15 	.word	0x08000c15
 8000b78:	08000c15 	.word	0x08000c15
 8000b7c:	08000c15 	.word	0x08000c15
 8000b80:	08000b9d 	.word	0x08000b9d
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e047      	b.n	8000c1c <SystemCoreClockUpdate+0x130>
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <SystemCoreClockUpdate+0x168>)
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e043      	b.n	8000c1c <SystemCoreClockUpdate+0x130>
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000b96:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <SystemCoreClockUpdate+0x16c>)
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e03f      	b.n	8000c1c <SystemCoreClockUpdate+0x130>
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d002      	beq.n	8000bc0 <SystemCoreClockUpdate+0xd4>
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d006      	beq.n	8000bcc <SystemCoreClockUpdate+0xe0>
 8000bbe:	e00b      	b.n	8000bd8 <SystemCoreClockUpdate+0xec>
 8000bc0:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <SystemCoreClockUpdate+0x168>)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	e00b      	b.n	8000be4 <SystemCoreClockUpdate+0xf8>
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <SystemCoreClockUpdate+0x16c>)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	e005      	b.n	8000be4 <SystemCoreClockUpdate+0xf8>
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	bf00      	nop
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	0e5b      	lsrs	r3, r3, #25
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	3301      	adds	r3, #1
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e003      	b.n	8000c1c <SystemCoreClockUpdate+0x130>
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	bf00      	nop
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SystemCoreClockUpdate+0x15c>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <SystemCoreClockUpdate+0x170>)
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <SystemCoreClockUpdate+0x164>)
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	bf00      	nop
 8000c3c:	371c      	adds	r7, #28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	08000dbc 	.word	0x08000dbc
 8000c50:	20000004 	.word	0x20000004
 8000c54:	00f42400 	.word	0x00f42400
 8000c58:	007a1200 	.word	0x007a1200
 8000c5c:	08000dac 	.word	0x08000dac

08000c60 <Reset_Handler>:
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>
 8000c64:	f7ff ff0c 	bl	8000a80 <SystemInit>
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopForever+0x6>)
 8000c6e:	585b      	ldr	r3, [r3, r1]
 8000c70:	5043      	str	r3, [r0, r1]
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <LoopForever+0xa>)
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LoopForever+0xe>)
 8000c78:	1842      	adds	r2, r0, r1
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
 8000c82:	2300      	movs	r3, #0
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LoopForever+0x16>)
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>
 8000c8e:	f000 f85d 	bl	8000d4c <__libc_init_array>
 8000c92:	f7ff fd7d 	bl	8000790 <main>

08000c96 <LoopForever>:
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
 8000c98:	20018000 	.word	0x20018000
 8000c9c:	08000df4 	.word	0x08000df4
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000030 	.word	0x20000030

08000cb0 <ADC1_2_IRQHandler>:
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <LL_InitTick+0x30>)
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <LL_InitTick+0x30>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <LL_InitTick+0x30>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 100U);
 8000cf0:	2164      	movs	r1, #100	; 0x64
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffde 	bl	8000cb4 <LL_InitTick>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <LL_mDelay+0x48>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d12:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d1a:	d00c      	beq.n	8000d36 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8000d22:	e008      	b.n	8000d36 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <LL_mDelay+0x48>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f3      	bne.n	8000d24 <LL_mDelay+0x24>
    }
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <__libc_init_array>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	4e0d      	ldr	r6, [pc, #52]	; (8000d84 <__libc_init_array+0x38>)
 8000d50:	4c0d      	ldr	r4, [pc, #52]	; (8000d88 <__libc_init_array+0x3c>)
 8000d52:	1ba4      	subs	r4, r4, r6
 8000d54:	10a4      	asrs	r4, r4, #2
 8000d56:	2500      	movs	r5, #0
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	d109      	bne.n	8000d70 <__libc_init_array+0x24>
 8000d5c:	4e0b      	ldr	r6, [pc, #44]	; (8000d8c <__libc_init_array+0x40>)
 8000d5e:	4c0c      	ldr	r4, [pc, #48]	; (8000d90 <__libc_init_array+0x44>)
 8000d60:	f000 f818 	bl	8000d94 <_init>
 8000d64:	1ba4      	subs	r4, r4, r6
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	2500      	movs	r5, #0
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d105      	bne.n	8000d7a <__libc_init_array+0x2e>
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}
 8000d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d74:	4798      	blx	r3
 8000d76:	3501      	adds	r5, #1
 8000d78:	e7ee      	b.n	8000d58 <__libc_init_array+0xc>
 8000d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7e:	4798      	blx	r3
 8000d80:	3501      	adds	r5, #1
 8000d82:	e7f2      	b.n	8000d6a <__libc_init_array+0x1e>
 8000d84:	08000dec 	.word	0x08000dec
 8000d88:	08000dec 	.word	0x08000dec
 8000d8c:	08000dec 	.word	0x08000dec
 8000d90:	08000df0 	.word	0x08000df0

08000d94 <_init>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr

08000da0 <_fini>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr
