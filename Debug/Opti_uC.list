
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001318  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080014a0  080014a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e0  080014e0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080014e0  080014e0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e0  080014e0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080014e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  080014f0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080014f0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004045  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a91  00000000  00000000  0002407d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  000250e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec72  00000000  00000000  00025658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002f4c  00000000  00000000  000442ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac966  00000000  00000000  00047216  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  000f3bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001488 	.word	0x08001488

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001488 	.word	0x08001488

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
//#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13
#define PWM_PIN LL_GPIO_PIN_10

void GPIO_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Green LED (user LED) - PA5
LL_GPIO_SetPinMode(LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

// Blue button - PA0
LL_GPIO_SetPinMode( GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT );
 8000326:	2200      	movs	r2, #0
 8000328:	2101      	movs	r1, #1
 800032a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032e:	f7ff ff63 	bl	80001f8 <LL_GPIO_SetPinMode>

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000332:	2004      	movs	r0, #4
 8000334:	f7ff ff48 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Blue button - PC13
LL_GPIO_SetPinMode( GPIOC, BUT_PIN, LL_GPIO_MODE_INPUT );
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033e:	4808      	ldr	r0, [pc, #32]	; (8000360 <GPIO_init+0x5c>)
 8000340:	f7ff ff5a 	bl	80001f8 <LL_GPIO_SetPinMode>
// Sortie PWM 50 Hz
LL_GPIO_SetPinMode(GPIOC, PWM_PIN, LL_GPIO_MODE_OUTPUT);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <GPIO_init+0x5c>)
 800034c:	f7ff ff54 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( GPIOC, PWM_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <GPIO_init+0x5c>)
 8000358:	f7ff ff8b 	bl	8000272 <LL_GPIO_SetPinOutputType>

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	48000800 	.word	0x48000800

08000364 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
if	( val )
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d005      	beq.n	800037e <LED_GREEN+0x1a>
	LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 8000372:	2120      	movs	r1, #32
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f7ff ffa8 	bl	80002cc <LL_GPIO_SetOutputPin>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}
 800037c:	e004      	b.n	8000388 <LED_GREEN+0x24>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 800037e:	2120      	movs	r1, #32
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f7ff ffb0 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
//return ( !LL_GPIO_IsInputPinSet( GPIOC, BUT_PIN ) );
return ( !LL_GPIO_IsInputPinSet( GPIOA, LL_GPIO_PIN_0) );
 8000394:	2101      	movs	r1, #1
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f7ff ff82 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	bf0c      	ite	eq
 80003a4:	2301      	moveq	r3, #1
 80003a6:	2300      	movne	r3, #0
 80003a8:	b2db      	uxtb	r3, r3
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <PWM_50Hz>:

void PWM_50Hz(int val)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if	( val )
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d005      	beq.n	80003ca <PWM_50Hz+0x1a>
		LL_GPIO_SetOutputPin(  GPIOC, PWM_PIN );
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <PWM_50Hz+0x2c>)
 80003c4:	f7ff ff82 	bl	80002cc <LL_GPIO_SetOutputPin>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );

}
 80003c8:	e004      	b.n	80003d4 <PWM_50Hz+0x24>
	else	LL_GPIO_ResetOutputPin(GPIOC, PWM_PIN );
 80003ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ce:	4803      	ldr	r0, [pc, #12]	; (80003dc <PWM_50Hz+0x2c>)
 80003d0:	f7ff ff8a 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	48000800 	.word	0x48000800

080003e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db0b      	blt.n	800040a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 021f 	and.w	r2, r3, #31
 80003f8:	4907      	ldr	r1, [pc, #28]	; (8000418 <__NVIC_EnableIRQ+0x38>)
 80003fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fe:	095b      	lsrs	r3, r3, #5
 8000400:	2001      	movs	r0, #1
 8000402:	fa00 f202 	lsl.w	r2, r0, r2
 8000406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000e100 	.word	0xe000e100

0800041c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	db0a      	blt.n	8000446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	b2da      	uxtb	r2, r3
 8000434:	490c      	ldr	r1, [pc, #48]	; (8000468 <__NVIC_SetPriority+0x4c>)
 8000436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	440b      	add	r3, r1
 8000440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000444:	e00a      	b.n	800045c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4908      	ldr	r1, [pc, #32]	; (800046c <__NVIC_SetPriority+0x50>)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	f003 030f 	and.w	r3, r3, #15
 8000452:	3b04      	subs	r3, #4
 8000454:	0112      	lsls	r2, r2, #4
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	440b      	add	r3, r1
 800045a:	761a      	strb	r2, [r3, #24]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	e000e100 	.word	0xe000e100
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800047c:	4907      	ldr	r1, [pc, #28]	; (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004ac:	4907      	ldr	r1, [pc, #28]	; (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_RCC_LSE_Enable+0x20>)
 80004d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <LL_RCC_LSE_Enable+0x20>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <LL_RCC_LSE_SetDriveCapability+0x28>)
 80004fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000502:	f023 0218 	bic.w	r2, r3, #24
 8000506:	4905      	ldr	r1, [pc, #20]	; (800051c <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4313      	orrs	r3, r2
 800050c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <LL_RCC_LSE_IsReady+0x24>)
 8000526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	2b02      	cmp	r3, #2
 8000530:	d101      	bne.n	8000536 <LL_RCC_LSE_IsReady+0x16>
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <LL_RCC_LSE_IsReady+0x18>
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LL_RCC_MSI_Enable+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <LL_RCC_MSI_Enable+0x1c>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_RCC_MSI_IsReady+0x20>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	2b02      	cmp	r3, #2
 8000576:	d101      	bne.n	800057c <LL_RCC_MSI_IsReady+0x14>
 8000578:	2301      	movs	r3, #1
 800057a:	e000      	b.n	800057e <LL_RCC_MSI_IsReady+0x16>
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d101      	bne.n	80005e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000

080005f0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_RCC_MSI_SetRange+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_RCC_MSI_SetRange+0x24>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	600b      	str	r3, [r1, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_RCC_SetSysClkSource+0x24>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 0203 	bic.w	r2, r3, #3
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <LL_RCC_SetSysClkSource+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	608b      	str	r3, [r1, #8]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_RCC_GetSysClkSource+0x18>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 030c 	and.w	r3, r3, #12
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_RCC_SetAHBPrescaler+0x24>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <LL_RCC_SetAHBPrescaler+0x24>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	608b      	str	r3, [r1, #8]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000

08000684 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	608b      	str	r3, [r1, #8]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80006bc:	4904      	ldr	r1, [pc, #16]	; (80006d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	608b      	str	r3, [r1, #8]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000

080006d4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <LL_RCC_SetRTCClockSource+0x28>)
 80006de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006e6:	4905      	ldr	r1, [pc, #20]	; (80006fc <LL_RCC_SetRTCClockSource+0x28>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_RCC_EnableRTC+0x20>)
 8000706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <LL_RCC_EnableRTC+0x20>)
 800070c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LL_RCC_ForceBackupDomainReset+0x20>)
 800072a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800074e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <LL_RCC_PLL_Enable+0x1c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <LL_RCC_PLL_Enable+0x1c>)
 8000776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <LL_RCC_PLL_Disable+0x1c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <LL_RCC_PLL_Disable+0x1c>)
 8000796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_RCC_PLL_IsReady+0x24>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007bc:	d101      	bne.n	80007c2 <LL_RCC_PLL_IsReady+0x16>
 80007be:	2301      	movs	r3, #1
 80007c0:	e000      	b.n	80007c4 <LL_RCC_PLL_IsReady+0x18>
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	4311      	orrs	r1, r2
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	0212      	lsls	r2, r2, #8
 80007f4:	4311      	orrs	r1, r2
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007fc:	4313      	orrs	r3, r2
 80007fe:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000
 8000810:	f9ff808c 	.word	0xf9ff808c

08000814 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800081e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 800083e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <LL_FLASH_SetLatency+0x24>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 0207 	bic.w	r2, r3, #7
 8000864:	4904      	ldr	r1, [pc, #16]	; (8000878 <LL_FLASH_SetLatency+0x24>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	600b      	str	r3, [r1, #0]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40022000 	.word	0x40022000

0800087c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4313      	orrs	r3, r2
 8000892:	600b      	str	r3, [r1, #0]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40007000 	.word	0x40007000

080008a4 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <LL_PWR_EnableBkUpAccess+0x1c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <LL_PWR_EnableBkUpAccess+0x1c>)
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40007000 	.word	0x40007000

080008c4 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <LL_PWR_SetPowerMode+0x24>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 0207 	bic.w	r2, r3, #7
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <LL_PWR_SetPowerMode+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	600b      	str	r3, [r1, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40007000 	.word	0x40007000

080008ec <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <LL_PWR_EnableInternWU+0x1c>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <LL_PWR_EnableInternWU+0x1c>)
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6093      	str	r3, [r2, #8]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40007000 	.word	0x40007000

0800090c <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800091a:	60da      	str	r2, [r3, #12]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	611a      	str	r2, [r3, #16]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	611a      	str	r2, [r3, #16]
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	22ca      	movs	r2, #202	; 0xca
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2253      	movs	r2, #83	; 0x53
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	609a      	str	r2, [r3, #8]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f023 0207 	bic.w	r2, r3, #7
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	0c1b      	lsrs	r3, r3, #16
 8000a2a:	041b      	lsls	r3, r3, #16
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3350      	adds	r3, #80	; 0x50
 8000a54:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3350      	adds	r3, #80	; 0x50
 8000a84:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f463 6290 	orn	r2, r3, #1152	; 0x480
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	2b40      	cmp	r3, #64	; 0x40
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2301      	moveq	r3, #1
 8000ad8:	2300      	movne	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	2b20      	cmp	r3, #32
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60da      	str	r2, [r3, #12]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <LL_LPM_EnableSleep+0x1c>)
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <LL_LPM_EnableSleep+0x1c>)
 8000b82:	f023 0304 	bic.w	r3, r3, #4
 8000b86:	6113      	str	r3, [r2, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <LL_LPM_EnableDeepSleep+0x1c>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <LL_LPM_EnableDeepSleep+0x1c>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6113      	str	r3, [r2, #16]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40010400 	.word	0x40010400

08000bdc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40010400 	.word	0x40010400

08000c00 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6153      	str	r3, [r2, #20]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40010400 	.word	0x40010400

08000c20 <main>:
void RTC_WKUP_IRQHandler();
void Set_Low_Power_Mode(uint32_t LowPowerMode);
void Init_Low_Power_Mode(uint32_t LowPowerMode);

int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

	  // Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fc3b 	bl	80004a0 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c2e:	f7ff fc1f 	bl	8000470 <LL_APB1_GRP1_EnableClock>

	  // config GPIO
	  GPIO_init();
 8000c32:	f7ff fb67 	bl	8000304 <GPIO_init>

	  // config RTC
	  RTC_Config();
 8000c36:	f000 f90d 	bl	8000e54 <RTC_Config>

	  // si j'appuie sur le bouton bleu et que je reset => je change d'expérience, expe s'incrémente
	  if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000c3a:	f7ff fba9 	bl	8000390 <BLUE_BUTTON>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <main+0x5c>

		  // je récupère la valeur de expe dans le backup register
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4840      	ldr	r0, [pc, #256]	; (8000d48 <main+0x128>)
 8000c48:	f7ff ff13 	bl	8000a72 <LL_RTC_BAK_GetRegister>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <main+0x12c>)
 8000c52:	601a      	str	r2, [r3, #0]
		  expe++;
 8000c54:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <main+0x12c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <main+0x12c>)
 8000c5c:	6013      	str	r3, [r2, #0]

		  if (expe>8)
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <main+0x12c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	dd02      	ble.n	8000c6c <main+0x4c>
       		expe=1;
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <main+0x12c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]

		 // stockage de la nouvelle valeur expe dans le backup register
		LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <main+0x12c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <main+0x128>)
 8000c76:	f7ff fee3 	bl	8000a40 <LL_RTC_BAK_SetRegister>
 8000c7a:	e007      	b.n	8000c8c <main+0x6c>

	  }else{
		  //LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4832      	ldr	r0, [pc, #200]	; (8000d48 <main+0x128>)
 8000c80:	f7ff fef7 	bl	8000a72 <LL_RTC_BAK_GetRegister>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <main+0x12c>)
 8000c8a:	601a      	str	r2, [r3, #0]
	  }

	  /* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
	  if (expe==1)
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <main+0x12c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <main+0x7a>
		  SystemClock_Config(); // fonction à appeler si expe == 1
 8000c94:	f000 f86c 	bl	8000d70 <SystemClock_Config>
 8000c98:	e001      	b.n	8000c9e <main+0x7e>
	  else
		  SystemClock_Config_MSI_24Mhz();
 8000c9a:	f000 f89d 	bl	8000dd8 <SystemClock_Config_MSI_24Mhz>


	  // Fonction qui active la calibration MSI vs LSE en fonction de expe
	   Calibration_MSI_vs_LPE();
 8000c9e:	f000 f85b 	bl	8000d58 <Calibration_MSI_vs_LPE>



	  // init systick timer (tick period at 10 ms)
	  LL_Init10msTick( SystemCoreClock );
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <main+0x130>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fbbe 	bl	8001428 <LL_Init10msTick>

	  while (1)  {

		  if (bluemode==1){
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <main+0x134>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d144      	bne.n	8000d3e <main+0x11e>





			  switch(expe)
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <main+0x12c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d841      	bhi.n	8000d42 <main+0x122>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <main+0xa4>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000ce1 	.word	0x08000ce1
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000cef 	.word	0x08000cef
 8000cd0:	08000cf7 	.word	0x08000cf7
 8000cd4:	08000cfd 	.word	0x08000cfd
 8000cd8:	08000d13 	.word	0x08000d13
 8000cdc:	08000d29 	.word	0x08000d29
			  {

			  	 case 1:
			  		 LL_LPM_EnableSleep();// MSI=4MHz | PLL=80Hz | V.Scaling=1 | F.Latency=4 | Calibration=OFF | Sleep=OFF->ON
 8000ce0:	f7ff ff4a 	bl	8000b78 <LL_LPM_EnableSleep>
			  		 __WFI();
 8000ce4:	bf30      	wfi
			  		 // bluemode=0;
			  	 break;
 8000ce6:	e02d      	b.n	8000d44 <main+0x124>

			  	 case 2:
			  		 LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=1 | F.Latency=1 | Calibration=OFF->ON | Sleep=OFF
 8000ce8:	f7ff fc50 	bl	800058c <LL_RCC_MSI_EnablePLLMode>
			  	break ;
 8000cec:	e02a      	b.n	8000d44 <main+0x124>

			  	 case 3:
			  		 LL_LPM_EnableSleep(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF | Sleep=OFF->ON
 8000cee:	f7ff ff43 	bl	8000b78 <LL_LPM_EnableSleep>
			  		 __WFI();
 8000cf2:	bf30      	wfi
			  		//bluemode=0;
			  	break ;
 8000cf4:	e026      	b.n	8000d44 <main+0x124>
			  	 case 4:
			  		 LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF->ON | Sleep=OFF
 8000cf6:	f7ff fc49 	bl	800058c <LL_RCC_MSI_EnablePLLMode>
			  	break ;
 8000cfa:	e023      	b.n	8000d44 <main+0x124>
			  	case 5: //Set_Low_Power_Mode(LL_PWR_MODE_SHUTDOWN);
			  			Init_Low_Power_Mode(LL_PWR_MODE_STOP0);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 f9ac 	bl	800105a <Init_Low_Power_Mode>
			  		    Set_Low_Power_Mode(LL_PWR_MODE_STOP0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f9c6 	bl	8001094 <Set_Low_Power_Mode>
			  			__WFI();
 8000d08:	bf30      	wfi
			  			bluemode=0;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <main+0x134>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
			  			break;
 8000d10:	e018      	b.n	8000d44 <main+0x124>

			  	case 6:
			  			Init_Low_Power_Mode(LL_PWR_MODE_STOP1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 f9a1 	bl	800105a <Init_Low_Power_Mode>
			  			Set_Low_Power_Mode(LL_PWR_MODE_STOP1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 f9bb 	bl	8001094 <Set_Low_Power_Mode>
			  			__WFI();
 8000d1e:	bf30      	wfi
			  			bluemode=0;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <main+0x134>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
			  			break;
 8000d26:	e00d      	b.n	8000d44 <main+0x124>

			  	case 7:
			  			Init_Low_Power_Mode(LL_PWR_MODE_STOP2);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f000 f996 	bl	800105a <Init_Low_Power_Mode>
			  			Set_Low_Power_Mode(LL_PWR_MODE_STOP2);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f9b0 	bl	8001094 <Set_Low_Power_Mode>
			  			__WFI();
 8000d34:	bf30      	wfi
			  			bluemode=0;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <main+0x134>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
			  			break;
 8000d3c:	e002      	b.n	8000d44 <main+0x124>
			  	 // case '8': Set_Low_Power_Mode(L_PWR_MODE_SHUTDOWN) // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration= ON | Sleep= ON | SHUTDOWN, wakeup 20s


			   }// end switch

		  }// end if
 8000d3e:	bf00      	nop
 8000d40:	e7b4      	b.n	8000cac <main+0x8c>
			  		 break ;
 8000d42:	bf00      	nop
		  if (bluemode==1){
 8000d44:	e7b2      	b.n	8000cac <main+0x8c>
 8000d46:	bf00      	nop
 8000d48:	40002800 	.word	0x40002800
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000024 	.word	0x20000024

08000d58 <Calibration_MSI_vs_LPE>:
	  * @brief Active le mécanisme dit "calibration" qui utilise une sorte de PLL asservie à l'oscillateur LSE

	  * @param  None
	  * @retval None
	  */
	void Calibration_MSI_vs_LPE(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
		// calibration active par défaut quand expe vaut 5,6,7 ou 8
		if (expe >= 5)
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <Calibration_MSI_vs_LPE+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	dd01      	ble.n	8000d68 <Calibration_MSI_vs_LPE+0x10>
			LL_RCC_MSI_EnablePLLMode();
 8000d64:	f7ff fc12 	bl	800058c <LL_RCC_MSI_EnablePLLMode>

	}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fd6d 	bl	8000854 <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 8000d7a:	f7ff fbe5 	bl	8000548 <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 8000d7e:	bf00      	nop
 8000d80:	f7ff fbf2 	bl	8000568 <LL_RCC_MSI_IsReady>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d1fa      	bne.n	8000d80 <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2228      	movs	r2, #40	; 0x28
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fd1f 	bl	80007d4 <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 8000d96:	f7ff fce9 	bl	800076c <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 8000d9a:	f7ff fd3b 	bl	8000814 <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 8000d9e:	bf00      	nop
 8000da0:	f7ff fd04 	bl	80007ac <LL_RCC_PLL_IsReady>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d1fa      	bne.n	8000da0 <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fc56 	bl	800065c <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f7ff fc31 	bl	8000618 <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000db6:	bf00      	nop
 8000db8:	f7ff fc42 	bl	8000640 <LL_RCC_GetSysClkSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d1fa      	bne.n	8000db8 <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fc5e 	bl	8000684 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fc6f 	bl	80006ac <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000dce:	f000 f9c5 	bl	800115c <SystemCoreClockUpdate>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <SystemClock_Config_MSI_24Mhz+0x78>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d103      	bne.n	8000dec <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff fd35 	bl	8000854 <LL_FLASH_SetLatency>
 8000dea:	e002      	b.n	8000df2 <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f7ff fd31 	bl	8000854 <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 8000df2:	f7ff fba9 	bl	8000548 <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 8000df6:	bf00      	nop
 8000df8:	f7ff fbb6 	bl	8000568 <LL_RCC_MSI_IsReady>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1fa      	bne.n	8000df8 <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fc2a 	bl	800065c <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fc05 	bl	8000618 <LL_RCC_SetSysClkSource>

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 8000e0e:	f7ff fcbd 	bl	800078c <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 8000e12:	f7ff fd0f 	bl	8000834 <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <SystemClock_Config_MSI_24Mhz+0x78>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d003      	beq.n	8000e26 <SystemClock_Config_MSI_24Mhz+0x4e>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000e1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e22:	f7ff fd2b 	bl	800087c <LL_PWR_SetRegulVoltageScaling>

//while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
	//{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fc2c 	bl	8000684 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fc3d 	bl	80006ac <LL_RCC_SetAPB2Prescaler>

// Set MSI clock to 24MHz
LL_RCC_MSI_EnableRangeSelection();
 8000e32:	f7ff fbbb 	bl	80005ac <LL_RCC_MSI_EnableRangeSelection>
while(LL_RCC_MSI_IsEnabledRangeSelect()!=1)
 8000e36:	bf00      	nop
 8000e38:	f7ff fbc8 	bl	80005cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d1fa      	bne.n	8000e38 <SystemClock_Config_MSI_24Mhz+0x60>
{};
LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000e42:	2090      	movs	r0, #144	; 0x90
 8000e44:	f7ff fbd4 	bl	80005f0 <LL_RCC_MSI_SetRange>
/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000e48:	f000 f988 	bl	800115c <SystemCoreClockUpdate>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000

08000e54 <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

	//LL_RCC_LSE_Disable();
	if (LL_RCC_LSE_IsReady()== 1){
 8000e58:	f7ff fb62 	bl	8000520 <LL_RCC_LSE_IsReady>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d106      	bne.n	8000e70 <RTC_Config+0x1c>
	//if (((RCC->BDCR)&(RCC_BDCR_LSEON))==RCC_BDCR_LSEON) { // cas du démarrage à chaud
			// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
			LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000e62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e66:	f7ff fb03 	bl	8000470 <LL_APB1_GRP1_EnableClock>
			LL_PWR_EnableBkUpAccess();
 8000e6a:	f7ff fd1b 	bl	80008a4 <LL_PWR_EnableBkUpAccess>

			// je stocke la variable expe au premier tour qui vaut 1
			expe=1;
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
		}
}
 8000e6e:	e046      	b.n	8000efe <RTC_Config+0xaa>
			LL_PWR_EnableBkUpAccess();
 8000e70:	f7ff fd18 	bl	80008a4 <LL_PWR_EnableBkUpAccess>
			LL_RCC_ForceBackupDomainReset();
 8000e74:	f7ff fc56 	bl	8000724 <LL_RCC_ForceBackupDomainReset>
			LL_RCC_ReleaseBackupDomainReset();
 8000e78:	f7ff fc66 	bl	8000748 <LL_RCC_ReleaseBackupDomainReset>
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fb39 	bl	80004f4 <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_Enable();
 8000e82:	f7ff fb25 	bl	80004d0 <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() != 1);
 8000e86:	bf00      	nop
 8000e88:	f7ff fb4a 	bl	8000520 <LL_RCC_LSE_IsReady>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1fa      	bne.n	8000e88 <RTC_Config+0x34>
			LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000e92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e96:	f7ff fc1d 	bl	80006d4 <LL_RCC_SetRTCClockSource>
			LL_RCC_EnableRTC();
 8000e9a:	f7ff fc31 	bl	8000700 <LL_RCC_EnableRTC>
			LL_RTC_DisableWriteProtection(RTC);
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <RTC_Config+0xb0>)
 8000ea0:	f7ff fd78 	bl	8000994 <LL_RTC_DisableWriteProtection>
			if(!LL_RTC_EnterInitMode(RTC));
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <RTC_Config+0xb0>)
 8000ea6:	f000 fa71 	bl	800138c <LL_RTC_EnterInitMode>
			LL_RTC_SetSynchPrescaler(RTC,257);
 8000eaa:	f240 1101 	movw	r1, #257	; 0x101
 8000eae:	4815      	ldr	r0, [pc, #84]	; (8000f04 <RTC_Config+0xb0>)
 8000eb0:	f7ff fd4e 	bl	8000950 <LL_RTC_SetSynchPrescaler>
			LL_RTC_SetAsynchPrescaler(RTC,127);
 8000eb4:	217f      	movs	r1, #127	; 0x7f
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <RTC_Config+0xb0>)
 8000eb8:	f7ff fd36 	bl	8000928 <LL_RTC_SetAsynchPrescaler>
			LL_RTC_DisableInitMode(RTC);
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <RTC_Config+0xb0>)
 8000ebe:	f7ff fd25 	bl	800090c <LL_RTC_DisableInitMode>
			while(LL_RTC_IsActiveFlag_INIT(RTC));
 8000ec2:	bf00      	nop
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <RTC_Config+0xb0>)
 8000ec6:	f7ff fdfc 	bl	8000ac2 <LL_RTC_IsActiveFlag_INIT>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f9      	bne.n	8000ec4 <RTC_Config+0x70>
			LL_RTC_ClearFlag_RS(RTC);
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <RTC_Config+0xb0>)
 8000ed2:	f7ff fe1c 	bl	8000b0e <LL_RTC_ClearFlag_RS>
			while(!LL_RTC_IsActiveFlag_RS(RTC));
 8000ed6:	bf00      	nop
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <RTC_Config+0xb0>)
 8000eda:	f7ff fe05 	bl	8000ae8 <LL_RTC_IsActiveFlag_RS>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f9      	beq.n	8000ed8 <RTC_Config+0x84>
			LL_RTC_EnableWriteProtection(RTC);
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <RTC_Config+0xb0>)
 8000ee6:	f7ff fd48 	bl	800097a <LL_RTC_EnableWriteProtection>
			expe=1;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <RTC_Config+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <RTC_Config+0xb4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <RTC_Config+0xb0>)
 8000efa:	f7ff fda1 	bl	8000a40 <LL_RTC_BAK_SetRegister>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40002800 	.word	0x40002800
 8000f08:	20000000 	.word	0x20000000

08000f0c <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
void SysTick_Handler(void)
	{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f18:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 5*expe))
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dd0b      	ble.n	8000f3a <SysTick_Handler+0x2e>
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <SysTick_Handler+0x90>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	441a      	add	r2, r3
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	db02      	blt.n	8000f3a <SysTick_Handler+0x2e>
			LED_GREEN(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff fa15 	bl	8000364 <LED_GREEN>

		if ((counter> 5*expe) && (counter<200))
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <SysTick_Handler+0x90>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	441a      	add	r2, r3
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da06      	bge.n	8000f5a <SysTick_Handler+0x4e>
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2bc7      	cmp	r3, #199	; 0xc7
 8000f52:	dc02      	bgt.n	8000f5a <SysTick_Handler+0x4e>
			LED_GREEN(0);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fa05 	bl	8000364 <LED_GREEN>

		if (counter>200)
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2bc8      	cmp	r3, #200	; 0xc8
 8000f60:	dd02      	ble.n	8000f68 <SysTick_Handler+0x5c>
			counter=0;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000f68:	f7ff fa12 	bl	8000390 <BLUE_BUTTON>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <SysTick_Handler+0x6c>
			bluemode=1;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <SysTick_Handler+0x94>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]


	  /* USER CODE END SysTick_IRQn 1 */

	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */
		if (counter%2)
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <SysTick_Handler+0x8c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <SysTick_Handler+0x80>
			PWM_50Hz(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fa13 	bl	80003b0 <PWM_50Hz>
			PWM_50Hz(0);

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000f8a:	e002      	b.n	8000f92 <SysTick_Handler+0x86>
			PWM_50Hz(0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fa0f 	bl	80003b0 <PWM_50Hz>
	}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000024 	.word	0x20000024

08000fa4 <RTC_wakeup_init>:

//----------------------------------------------------------------------
	// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init( int delay )
	{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection( RTC );
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fae:	f7ff fcf1 	bl	8000994 <LL_RTC_DisableWriteProtection>
	LL_RTC_WAKEUP_Disable( RTC );
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fb4:	f7ff fd0e 	bl	80009d4 <LL_RTC_WAKEUP_Disable>
	while	( !LL_RTC_IsActiveFlag_WUTW( RTC ) )
 8000fb8:	bf00      	nop
 8000fba:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fbc:	f7ff fdb9 	bl	8000b32 <LL_RTC_IsActiveFlag_WUTW>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f9      	beq.n	8000fba <RTC_wakeup_init+0x16>
		{ }
	// connecter le timer a l'horloge 1Hz de la RTC
	LL_RTC_WAKEUP_SetClock( RTC, LL_RTC_WAKEUPCLOCK_CKSPRE );
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fca:	f7ff fd13 	bl	80009f4 <LL_RTC_WAKEUP_SetClock>

	// fixer la duree de temporisation
	LL_RTC_WAKEUP_SetAutoReload( RTC, delay );	// 16 bits
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fd4:	f7ff fd21 	bl	8000a1a <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_ClearFlag_WUT(RTC);
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fda:	f7ff fd61 	bl	8000aa0 <LL_RTC_ClearFlag_WUT>
	LL_RTC_EnableIT_WUT(RTC);
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fe0:	f7ff fdba 	bl	8000b58 <LL_RTC_EnableIT_WUT>
	LL_RTC_WAKEUP_Enable(RTC);
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fe6:	f7ff fce5 	bl	80009b4 <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableWriteProtection(RTC);
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <RTC_wakeup_init+0x54>)
 8000fec:	f7ff fcc5 	bl	800097a <LL_RTC_EnableWriteProtection>
	}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40002800 	.word	0x40002800

08000ffc <RTC_wakeup_init_from_standby_or_shutdown>:
//----------------------------------------------------------------------
	// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
	// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
	// delay se configure en seconde à condition que l'horloge du wake up timer soit à 1Hz comme la RTC
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
	{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffcd 	bl	8000fa4 <RTC_wakeup_init>
	// enable the Internal Wake-up line
	LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 800100a:	f7ff fc6f 	bl	80008ec <LL_PWR_EnableInternWU>
	}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <RTC_wakeup_init_from_stop>:
	// le contenu de la RAM et des registres étant préservé, le MPU
	// reprend l'execution après l'instruction WFI

//----------------------------------------------------------------------
void RTC_wakeup_init_from_stop( int delay )
	{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffc0 	bl	8000fa4 <RTC_wakeup_init>
	// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
	LL_EXTI_EnableIT_0_31( LL_EXTI_LINE_20 );
 8001024:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001028:	f7ff fdc6 	bl	8000bb8 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31( LL_EXTI_LINE_20 );
 800102c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001030:	f7ff fdd4 	bl	8000bdc <LL_EXTI_EnableRisingTrig_0_31>
	// valider l'interrupt chez NVIC
	NVIC_SetPriority( RTC_WKUP_IRQn, 1 );
 8001034:	2101      	movs	r1, #1
 8001036:	2003      	movs	r0, #3
 8001038:	f7ff f9f0 	bl	800041c <__NVIC_SetPriority>
	NVIC_EnableIRQ( RTC_WKUP_IRQn );
 800103c:	2003      	movs	r0, #3
 800103e:	f7ff f9cf 	bl	80003e0 <__NVIC_EnableIRQ>
	}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <RTC_WKUP_IRQHandler>:

//----------------------------------------------------------------------
	// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
	{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 800104e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001052:	f7ff fdd5 	bl	8000c00 <LL_EXTI_ClearFlag_0_31>
	//bluemode=0;
	}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <Init_Low_Power_Mode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */

void Init_Low_Power_Mode(uint32_t LowPowerMode){
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]

	if ((LowPowerMode == LL_PWR_MODE_STOP0) || (LowPowerMode == LL_PWR_MODE_STOP1) || (LowPowerMode == LL_PWR_MODE_STOP2)){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <Init_Low_Power_Mode+0x1a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d002      	beq.n	8001074 <Init_Low_Power_Mode+0x1a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d102      	bne.n	800107a <Init_Low_Power_Mode+0x20>
		RTC_wakeup_init_from_stop(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff ffce 	bl	8001016 <RTC_wakeup_init_from_stop>
	}

	if ((LowPowerMode == LL_PWR_MODE_STANDBY) || (LowPowerMode == LL_PWR_MODE_SHUTDOWN)){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d002      	beq.n	8001086 <Init_Low_Power_Mode+0x2c>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d102      	bne.n	800108c <Init_Low_Power_Mode+0x32>
			RTC_wakeup_init_from_standby_or_shutdown(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f7ff ffb8 	bl	8000ffc <RTC_wakeup_init_from_standby_or_shutdown>
		}



}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Set_Low_Power_Mode>:

void Set_Low_Power_Mode(uint32_t LowPowerMode){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	// Activate the low power mode desired
		// set the SLEEPDEEP bit
		LL_LPM_EnableDeepSleep();
 800109c:	f7ff fd7c 	bl	8000b98 <LL_LPM_EnableDeepSleep>
		// Set LPMS in the PWR_CR1 register
		LL_PWR_SetPowerMode(LowPowerMode);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fc0f 	bl	80008c4 <LL_PWR_SetPowerMode>


}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <HardFault_Handler+0x4>

080010c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <BusFault_Handler+0x4>

080010ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <UsageFault_Handler+0x4>

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SystemInit>:
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <SystemInit+0x64>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <SystemInit+0x64>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <SystemInit+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <SystemInit+0x68>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <SystemInit+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <SystemInit+0x68>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <SystemInit+0x68>)
 800111c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001120:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <SystemInit+0x68>)
 8001128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SystemInit+0x68>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <SystemInit+0x68>)
 8001134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <SystemInit+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SystemInit+0x64>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	40021000 	.word	0x40021000

0800115c <SystemCoreClockUpdate>:
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	2302      	movs	r3, #2
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b4f      	ldr	r3, [pc, #316]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d107      	bne.n	8001196 <SystemCoreClockUpdate+0x3a>
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 8001188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e005      	b.n	80011a2 <SystemCoreClockUpdate+0x46>
 8001196:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	4a46      	ldr	r2, [pc, #280]	; (80012bc <SystemCoreClockUpdate+0x160>)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	d865      	bhi.n	8001284 <SystemCoreClockUpdate+0x128>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <SystemCoreClockUpdate+0x64>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011f5 	.word	0x080011f5
 80011c4:	08001285 	.word	0x08001285
 80011c8:	08001285 	.word	0x08001285
 80011cc:	08001285 	.word	0x08001285
 80011d0:	080011fd 	.word	0x080011fd
 80011d4:	08001285 	.word	0x08001285
 80011d8:	08001285 	.word	0x08001285
 80011dc:	08001285 	.word	0x08001285
 80011e0:	08001205 	.word	0x08001205
 80011e4:	08001285 	.word	0x08001285
 80011e8:	08001285 	.word	0x08001285
 80011ec:	08001285 	.word	0x08001285
 80011f0:	0800120d 	.word	0x0800120d
 80011f4:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e047      	b.n	800128c <SystemCoreClockUpdate+0x130>
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 80011fe:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <SystemCoreClockUpdate+0x168>)
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e043      	b.n	800128c <SystemCoreClockUpdate+0x130>
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <SystemCoreClockUpdate+0x16c>)
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e03f      	b.n	800128c <SystemCoreClockUpdate+0x130>
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	3301      	adds	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d002      	beq.n	8001230 <SystemCoreClockUpdate+0xd4>
 800122a:	2b03      	cmp	r3, #3
 800122c:	d006      	beq.n	800123c <SystemCoreClockUpdate+0xe0>
 800122e:	e00b      	b.n	8001248 <SystemCoreClockUpdate+0xec>
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <SystemCoreClockUpdate+0x168>)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e00b      	b.n	8001254 <SystemCoreClockUpdate+0xf8>
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <SystemCoreClockUpdate+0x16c>)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	e005      	b.n	8001254 <SystemCoreClockUpdate+0xf8>
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	bf00      	nop
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	0e5b      	lsrs	r3, r3, #25
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	3301      	adds	r3, #1
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e003      	b.n	800128c <SystemCoreClockUpdate+0x130>
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	bf00      	nop
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SystemCoreClockUpdate+0x15c>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <SystemCoreClockUpdate+0x170>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <SystemCoreClockUpdate+0x164>)
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	080014b0 	.word	0x080014b0
 80012c0:	20000004 	.word	0x20000004
 80012c4:	00f42400 	.word	0x00f42400
 80012c8:	007a1200 	.word	0x007a1200
 80012cc:	080014a0 	.word	0x080014a0

080012d0 <Reset_Handler>:
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopForever+0x2>
 80012d4:	f7ff ff0c 	bl	80010f0 <SystemInit>
 80012d8:	2100      	movs	r1, #0
 80012da:	e003      	b.n	80012e4 <LoopCopyDataInit>

080012dc <CopyDataInit>:
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <LoopForever+0x6>)
 80012de:	585b      	ldr	r3, [r3, r1]
 80012e0:	5043      	str	r3, [r0, r1]
 80012e2:	3104      	adds	r1, #4

080012e4 <LoopCopyDataInit>:
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <LoopForever+0xa>)
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <LoopForever+0xe>)
 80012e8:	1842      	adds	r2, r0, r1
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3f6      	bcc.n	80012dc <CopyDataInit>
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <LoopForever+0x12>)
 80012f0:	e002      	b.n	80012f8 <LoopFillZerobss>

080012f2 <FillZerobss>:
 80012f2:	2300      	movs	r3, #0
 80012f4:	f842 3b04 	str.w	r3, [r2], #4

080012f8 <LoopFillZerobss>:
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LoopForever+0x16>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3f9      	bcc.n	80012f2 <FillZerobss>
 80012fe:	f000 f89f 	bl	8001440 <__libc_init_array>
 8001302:	f7ff fc8d 	bl	8000c20 <main>

08001306 <LoopForever>:
 8001306:	e7fe      	b.n	8001306 <LoopForever>
 8001308:	20018000 	.word	0x20018000
 800130c:	080014e8 	.word	0x080014e8
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000008 	.word	0x20000008
 800131c:	2000002c 	.word	0x2000002c

08001320 <ADC1_2_IRQHandler>:
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>

08001322 <LL_RTC_EnableInitMode>:
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001330:	60da      	str	r2, [r3, #12]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RTC_IsActiveFlag_INIT>:
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134e:	2b40      	cmp	r3, #64	; 0x40
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffcd 	bl	800133e <LL_RTC_IsActiveFlag_INIT>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11e      	bne.n	80013e8 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb9 	bl	8001322 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffc4 	bl	800133e <LL_RTC_IsActiveFlag_INIT>
 80013b6:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80013b8:	e010      	b.n	80013dc <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80013ba:	f7ff ffd3 	bl	8001364 <LL_SYSTICK_IsActiveCounterFlag>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d102      	bne.n	80013ca <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffb7 	bl	800133e <LL_RTC_IsActiveFlag_INIT>
 80013d0:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <LL_RTC_EnterInitMode+0x5c>
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d1e8      	bne.n	80013ba <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <LL_InitTick+0x30>)
 8001408:	3b01      	subs	r3, #1
 800140a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <LL_InitTick+0x30>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <LL_InitTick+0x30>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e010 	.word	0xe000e010

08001428 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 100U);
 8001430:	2164      	movs	r1, #100	; 0x64
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffde 	bl	80013f4 <LL_InitTick>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <__libc_init_array>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	4e0d      	ldr	r6, [pc, #52]	; (8001478 <__libc_init_array+0x38>)
 8001444:	4c0d      	ldr	r4, [pc, #52]	; (800147c <__libc_init_array+0x3c>)
 8001446:	1ba4      	subs	r4, r4, r6
 8001448:	10a4      	asrs	r4, r4, #2
 800144a:	2500      	movs	r5, #0
 800144c:	42a5      	cmp	r5, r4
 800144e:	d109      	bne.n	8001464 <__libc_init_array+0x24>
 8001450:	4e0b      	ldr	r6, [pc, #44]	; (8001480 <__libc_init_array+0x40>)
 8001452:	4c0c      	ldr	r4, [pc, #48]	; (8001484 <__libc_init_array+0x44>)
 8001454:	f000 f818 	bl	8001488 <_init>
 8001458:	1ba4      	subs	r4, r4, r6
 800145a:	10a4      	asrs	r4, r4, #2
 800145c:	2500      	movs	r5, #0
 800145e:	42a5      	cmp	r5, r4
 8001460:	d105      	bne.n	800146e <__libc_init_array+0x2e>
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001468:	4798      	blx	r3
 800146a:	3501      	adds	r5, #1
 800146c:	e7ee      	b.n	800144c <__libc_init_array+0xc>
 800146e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001472:	4798      	blx	r3
 8001474:	3501      	adds	r5, #1
 8001476:	e7f2      	b.n	800145e <__libc_init_array+0x1e>
 8001478:	080014e0 	.word	0x080014e0
 800147c:	080014e0 	.word	0x080014e0
 8001480:	080014e0 	.word	0x080014e0
 8001484:	080014e4 	.word	0x080014e4

08001488 <_init>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr

08001494 <_fini>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	bf00      	nop
 8001498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149a:	bc08      	pop	{r3}
 800149c:	469e      	mov	lr, r3
 800149e:	4770      	bx	lr
