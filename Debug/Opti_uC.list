
Opti_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800103c  0800103c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800103c  0800103c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800103c  0800103c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  0800104c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800104c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f4e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a91  00000000  00000000  00023f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000598  00000000  00000000  00024a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f71a  00000000  00000000  000254e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e24  00000000  00000000  00044bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac8c2  00000000  00000000  00047a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f42e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c4  00000000  00000000  000f435c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fe4 	.word	0x08000fe4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000fe4 	.word	0x08000fe4

080001c8 <LL_AHB2_GRP1_EnableClock>:
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <GPIO_init+0x38>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	48000800 	.word	0x48000800

08000340 <LED_GREEN>:
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <LED_GREEN+0x1a>
 800034e:	2120      	movs	r1, #32
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f7ff ffba 	bl	80002cc <LL_GPIO_SetOutputPin>
 8000358:	e004      	b.n	8000364 <LED_GREEN+0x24>
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f7ff ffc2 	bl	80002e8 <LL_GPIO_ResetOutputPin>
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <BLUE_BUTTON>:
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <BLUE_BUTTON+0x20>)
 8000376:	f7ff ff94 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800

08000390 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800039c:	4907      	ldr	r1, [pc, #28]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ae:	68fb      	ldr	r3, [r7, #12]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003cc:	4907      	ldr	r1, [pc, #28]	; (80003ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80003d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4013      	ands	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003de:	68fb      	ldr	r3, [r7, #12]
}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LL_RCC_LSE_Enable+0x20>)
 80003f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003fa:	4a05      	ldr	r2, [pc, #20]	; (8000410 <LL_RCC_LSE_Enable+0x20>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <LL_RCC_LSE_SetDriveCapability+0x28>)
 800041e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000422:	f023 0218 	bic.w	r2, r3, #24
 8000426:	4905      	ldr	r1, [pc, #20]	; (800043c <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4313      	orrs	r3, r2
 800042c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <LL_RCC_LSE_IsReady+0x24>)
 8000446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800044a:	f003 0302 	and.w	r3, r3, #2
 800044e:	2b02      	cmp	r3, #2
 8000450:	d101      	bne.n	8000456 <LL_RCC_LSE_IsReady+0x16>
 8000452:	2301      	movs	r3, #1
 8000454:	e000      	b.n	8000458 <LL_RCC_LSE_IsReady+0x18>
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <LL_RCC_MSI_Enable+0x1c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <LL_RCC_MSI_Enable+0x1c>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <LL_RCC_MSI_IsReady+0x20>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f003 0302 	and.w	r3, r3, #2
 8000494:	2b02      	cmp	r3, #2
 8000496:	d101      	bne.n	800049c <LL_RCC_MSI_IsReady+0x14>
 8000498:	2301      	movs	r3, #1
 800049a:	e000      	b.n	800049e <LL_RCC_MSI_IsReady+0x16>
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_RCC_SetSysClkSource+0x24>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f023 0203 	bic.w	r2, r3, #3
 80004dc:	4904      	ldr	r1, [pc, #16]	; (80004f0 <LL_RCC_SetSysClkSource+0x24>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	608b      	str	r3, [r1, #8]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <LL_RCC_GetSysClkSource+0x18>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 030c 	and.w	r3, r3, #12
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <LL_RCC_SetAHBPrescaler+0x24>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000520:	4904      	ldr	r1, [pc, #16]	; (8000534 <LL_RCC_SetAHBPrescaler+0x24>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	608b      	str	r3, [r1, #8]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000548:	4904      	ldr	r1, [pc, #16]	; (800055c <LL_RCC_SetAPB1Prescaler+0x24>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4313      	orrs	r3, r2
 800054e:	608b      	str	r3, [r1, #8]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <LL_RCC_SetAPB2Prescaler+0x24>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	608b      	str	r3, [r1, #8]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000

08000588 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LL_RCC_SetRTCClockSource+0x28>)
 8000592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <LL_RCC_SetRTCClockSource+0x28>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4313      	orrs	r3, r2
 80005a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <LL_RCC_EnableRTC+0x20>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <LL_RCC_EnableRTC+0x20>)
 80005c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LL_RCC_ForceBackupDomainReset+0x20>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <LL_RCC_ForceBackupDomainReset+0x20>)
 80005e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800060c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <LL_RCC_PLL_Enable+0x1c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <LL_RCC_PLL_Enable+0x1c>)
 800062a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <LL_RCC_PLL_Disable+0x1c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <LL_RCC_PLL_Disable+0x1c>)
 800064a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <LL_RCC_PLL_IsReady+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800066c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000670:	d101      	bne.n	8000676 <LL_RCC_PLL_IsReady+0x16>
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <LL_RCC_PLL_IsReady+0x18>
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800069c:	4013      	ands	r3, r2
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	4311      	orrs	r1, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	0212      	lsls	r2, r2, #8
 80006a8:	4311      	orrs	r1, r2
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	430a      	orrs	r2, r1
 80006ae:	4904      	ldr	r1, [pc, #16]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006b0:	4313      	orrs	r3, r2
 80006b2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000
 80006c4:	f9ff808c 	.word	0xf9ff808c

080006c8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_RCC_PLL_DisableDomain_SYS>:
  *       not used, Main PLL  should be 0
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_DisableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_DisableDomain_SYS(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <LL_RCC_PLL_DisableDomain_SYS+0x1c>)
 80006f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_FLASH_SetLatency+0x24>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0207 	bic.w	r2, r3, #7
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_FLASH_SetLatency+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	600b      	str	r3, [r1, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40022000 	.word	0x40022000

08000730 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	600b      	str	r3, [r1, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40007000 	.word	0x40007000

08000758 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LL_PWR_EnableBkUpAccess+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40007000 	.word	0x40007000

08000778 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000786:	60da      	str	r2, [r3, #12]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	041b      	lsls	r3, r3, #16
 80007aa:	431a      	orrs	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	611a      	str	r2, [r3, #16]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80007ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	611a      	str	r2, [r3, #16]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	22ff      	movs	r2, #255	; 0xff
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	22ca      	movs	r2, #202	; 0xca
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2253      	movs	r2, #83	; 0x53
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3350      	adds	r3, #80	; 0x50
 8000834:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4413      	add	r3, r2
 800083e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3350      	adds	r3, #80	; 0x50
 8000864:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	2b40      	cmp	r3, #64	; 0x40
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	2b20      	cmp	r3, #32
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008dc:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60da      	str	r2, [r3, #12]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <LL_LPM_EnableSleep+0x1c>)
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <LL_LPM_EnableSleep+0x1c>)
 80008fa:	f023 0304 	bic.w	r3, r3, #4
 80008fe:	6113      	str	r3, [r2, #16]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6153      	str	r3, [r2, #20]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40010400 	.word	0x40010400

08000930 <main>:
void RTC_Config(void);



int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	  // Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fd43 	bl	80003c0 <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800093a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800093e:	f7ff fd27 	bl	8000390 <LL_APB1_GRP1_EnableClock>

	  // config GPIO
	  GPIO_init();
 8000942:	f7ff fcdf 	bl	8000304 <GPIO_init>

	  // config RTC
	  RTC_Config();
 8000946:	f000 f8bd 	bl	8000ac4 <RTC_Config>

	  // si j'appuie sur le bouton bleu et que je reset => je change d'expérience, expe s'incrémente
	  if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 800094a:	f7ff fd0f 	bl	800036c <BLUE_BUTTON>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d01a      	beq.n	800098a <main+0x5a>

		  // je récupère la valeur de expe dans le backup register
		  expe=LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000954:	2100      	movs	r1, #0
 8000956:	4823      	ldr	r0, [pc, #140]	; (80009e4 <main+0xb4>)
 8000958:	f7ff ff7b 	bl	8000852 <LL_RTC_BAK_GetRegister>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <main+0xb8>)
 8000962:	601a      	str	r2, [r3, #0]
		  expe++;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <main+0xb8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <main+0xb8>)
 800096c:	6013      	str	r3, [r2, #0]

		  if (expe>8)
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0xb8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b08      	cmp	r3, #8
 8000974:	dd02      	ble.n	800097c <main+0x4c>
       		expe=1;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <main+0xb8>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

		 // stockage de la nouvelle valeur expe dans le backup register
		LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0xb8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	4817      	ldr	r0, [pc, #92]	; (80009e4 <main+0xb4>)
 8000986:	f7ff ff4b 	bl	8000820 <LL_RTC_BAK_SetRegister>
	  }



	  /* Configure the system clock en fonction de expe qui défini Voltage Scaling and Flash Latency et utilisation de la PLL   */
	  if (expe==1)
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <main+0xb8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d102      	bne.n	8000998 <main+0x68>
		  SystemClock_Config(); // fonction à appeler si expe == 1
 8000992:	f000 f82f 	bl	80009f4 <SystemClock_Config>
 8000996:	e001      	b.n	800099c <main+0x6c>
	  else
		  SystemClock_Config_MSI_24Mhz();
 8000998:	f000 f860 	bl	8000a5c <SystemClock_Config_MSI_24Mhz>
	 // Calibration_MSI_vs_LPE();



	  // init systick timer (tick period at 10 ms)
	  LL_Init10msTick( SystemCoreClock );
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0xbc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 faef 	bl	8000f84 <LL_Init10msTick>

	  while (1)  {

		  if (bluemode==1){
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <main+0xc0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d1fb      	bne.n	80009a6 <main+0x76>

			  switch(expe)
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <main+0xb8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b31      	subs	r3, #49	; 0x31
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d8f6      	bhi.n	80009a6 <main+0x76>
 80009b8:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <main+0x90>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009d9 	.word	0x080009d9
 80009cc:	080009dd 	.word	0x080009dd
			  {

			  	  case '1': LL_LPM_EnableSleep(); // MSI=4MHz | PLL=80Hz | V.Scaling=1 | F.Latency=4 | Calibration=OFF | Sleep=OFF->ON
 80009d0:	f7ff ff8e 	bl	80008f0 <LL_LPM_EnableSleep>
			  	  case '2': LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=1 | F.Latency=1 | Calibration=OFF->ON | Sleep=OFF
 80009d4:	f7ff fd6a 	bl	80004ac <LL_RCC_MSI_EnablePLLMode>
			  	  case '3': LL_LPM_EnableSleep(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF | Sleep=OFF->ON
 80009d8:	f7ff ff8a 	bl	80008f0 <LL_LPM_EnableSleep>
			  	  case '4': LL_RCC_MSI_EnablePLLMode(); // MSI=24MHz | PLL=OFF | V.Scaling=2 | F.Latency=3 | Calibration=OFF->ON | Sleep=OFF
 80009dc:	f7ff fd66 	bl	80004ac <LL_RCC_MSI_EnablePLLMode>
		  if (bluemode==1){
 80009e0:	e7e1      	b.n	80009a6 <main+0x76>
 80009e2:	bf00      	nop
 80009e4:	40002800 	.word	0x40002800
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004
 80009f0:	20000024 	.word	0x20000024

080009f4 <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80009f8:	2004      	movs	r0, #4
 80009fa:	f7ff fe85 	bl	8000708 <LL_FLASH_SetLatency>
LL_RCC_MSI_Enable();
 80009fe:	f7ff fd33 	bl	8000468 <LL_RCC_MSI_Enable>
while	(LL_RCC_MSI_IsReady() != 1)
 8000a02:	bf00      	nop
 8000a04:	f7ff fd40 	bl	8000488 <LL_RCC_MSI_IsReady>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d1fa      	bne.n	8000a04 <SystemClock_Config+0x10>
	{ };
  
/* Main PLL configuration and activation */
LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2228      	movs	r2, #40	; 0x28
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fe37 	bl	8000688 <LL_RCC_PLL_ConfigDomain_SYS>
LL_RCC_PLL_Enable();
 8000a1a:	f7ff fe01 	bl	8000620 <LL_RCC_PLL_Enable>
LL_RCC_PLL_EnableDomain_SYS();
 8000a1e:	f7ff fe53 	bl	80006c8 <LL_RCC_PLL_EnableDomain_SYS>
while(LL_RCC_PLL_IsReady() != 1)
 8000a22:	bf00      	nop
 8000a24:	f7ff fe1c 	bl	8000660 <LL_RCC_PLL_IsReady>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d1fa      	bne.n	8000a24 <SystemClock_Config+0x30>
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fd6e 	bl	8000510 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f7ff fd49 	bl	80004cc <LL_RCC_SetSysClkSource>
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff fd5a 	bl	80004f4 <LL_RCC_GetSysClkSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b0c      	cmp	r3, #12
 8000a44:	d1fa      	bne.n	8000a3c <SystemClock_Config+0x48>
	{ };
  
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fd76 	bl	8000538 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fd87 	bl	8000560 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000a52:	f000 f931 	bl	8000cb8 <SystemCoreClockUpdate>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <SystemClock_Config_MSI_24Mhz>:
  *            Flash Latency(WS)              = 1 (if expe=2) or 3
  * @param  None
  * @retval None
  */

void SystemClock_Config_MSI_24Mhz(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
/* MSI configuration and activation */
// Réglage de la latence d'accès à la mémoire flash en fonction de expe
if (expe==2)
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <SystemClock_Config_MSI_24Mhz+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d103      	bne.n	8000a70 <SystemClock_Config_MSI_24Mhz+0x14>
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fe4d 	bl	8000708 <LL_FLASH_SetLatency>
 8000a6e:	e002      	b.n	8000a76 <SystemClock_Config_MSI_24Mhz+0x1a>
else
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f7ff fe49 	bl	8000708 <LL_FLASH_SetLatency>


// activation du MSI
LL_RCC_MSI_Enable();
 8000a76:	f7ff fcf7 	bl	8000468 <LL_RCC_MSI_Enable>

while	(LL_RCC_MSI_IsReady() != 1)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff fd04 	bl	8000488 <LL_RCC_MSI_IsReady>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d1fa      	bne.n	8000a7c <SystemClock_Config_MSI_24Mhz+0x20>
	{ };

/* Désactive le mode PLL */
LL_RCC_PLL_Disable();
 8000a86:	f7ff fddb 	bl	8000640 <LL_RCC_PLL_Disable>
LL_RCC_PLL_DisableDomain_SYS();
 8000a8a:	f7ff fe2d 	bl	80006e8 <LL_RCC_PLL_DisableDomain_SYS>

/*Réglage du Voltage Scaling en fonction de expe si ==2 on laisse le réglage par défaut sinon on met à 2  */
if (expe!=2)
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <SystemClock_Config_MSI_24Mhz+0x64>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d003      	beq.n	8000a9e <SystemClock_Config_MSI_24Mhz+0x42>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000a96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a9a:	f7ff fe49 	bl	8000730 <LL_PWR_SetRegulVoltageScaling>


/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fd36 	bl	8000510 <LL_RCC_SetAHBPrescaler>
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff fd11 	bl	80004cc <LL_RCC_SetSysClkSource>
//while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
	//{ };

/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fd44 	bl	8000538 <LL_RCC_SetAPB1Prescaler>
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fd55 	bl	8000560 <LL_RCC_SetAPB2Prescaler>

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000ab6:	f000 f8ff 	bl	8000cb8 <SystemCoreClockUpdate>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000000 	.word	0x20000000

08000ac4 <RTC_Config>:
  * @param  None
  * @retval None
  */


void RTC_Config(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if (LL_RCC_LSE_IsReady()!= 1){
 8000ac8:	f7ff fcba 	bl	8000440 <LL_RCC_LSE_IsReady>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d006      	beq.n	8000ae0 <RTC_Config+0x1c>
	//if (((RCC->BDCR)&(RCC_BDCR_LSEON))==RCC_BDCR_LSEON) { // cas du démarrage à chaud
			// le RTC est supposée déjà fonctionner, mais l'interface RTC-MPU n'est pas actif, il faut l'initialiser avant de tenter l'accés aux backup-registers
			LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000ad2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ad6:	f7ff fc5b 	bl	8000390 <LL_APB1_GRP1_EnableClock>
			LL_PWR_EnableBkUpAccess();
 8000ada:	f7ff fe3d 	bl	8000758 <LL_PWR_EnableBkUpAccess>

			// je stocke la variable expe au premier tour qui vaut 1
			expe=1;
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
		}
}
 8000ade:	e046      	b.n	8000b6e <RTC_Config+0xaa>
			LL_PWR_EnableBkUpAccess();
 8000ae0:	f7ff fe3a 	bl	8000758 <LL_PWR_EnableBkUpAccess>
			LL_RCC_ForceBackupDomainReset();
 8000ae4:	f7ff fd78 	bl	80005d8 <LL_RCC_ForceBackupDomainReset>
			LL_RCC_ReleaseBackupDomainReset();
 8000ae8:	f7ff fd88 	bl	80005fc <LL_RCC_ReleaseBackupDomainReset>
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fc91 	bl	8000414 <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_Enable();
 8000af2:	f7ff fc7d 	bl	80003f0 <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() != 1);
 8000af6:	bf00      	nop
 8000af8:	f7ff fca2 	bl	8000440 <LL_RCC_LSE_IsReady>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d1fa      	bne.n	8000af8 <RTC_Config+0x34>
			LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000b02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b06:	f7ff fd3f 	bl	8000588 <LL_RCC_SetRTCClockSource>
			LL_RCC_EnableRTC();
 8000b0a:	f7ff fd53 	bl	80005b4 <LL_RCC_EnableRTC>
			LL_RTC_DisableWriteProtection(RTC);
 8000b0e:	4819      	ldr	r0, [pc, #100]	; (8000b74 <RTC_Config+0xb0>)
 8000b10:	f7ff fe76 	bl	8000800 <LL_RTC_DisableWriteProtection>
			if(!LL_RTC_EnterInitMode(RTC));
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <RTC_Config+0xb0>)
 8000b16:	f000 f9e7 	bl	8000ee8 <LL_RTC_EnterInitMode>
			LL_RTC_SetAsynchPrescaler(RTC,128);
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <RTC_Config+0xb0>)
 8000b1e:	f7ff fe39 	bl	8000794 <LL_RTC_SetAsynchPrescaler>
			LL_RTC_SetSynchPrescaler(RTC,256);
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	4813      	ldr	r0, [pc, #76]	; (8000b74 <RTC_Config+0xb0>)
 8000b28:	f7ff fe48 	bl	80007bc <LL_RTC_SetSynchPrescaler>
			LL_RTC_DisableInitMode(RTC);
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <RTC_Config+0xb0>)
 8000b2e:	f7ff fe23 	bl	8000778 <LL_RTC_DisableInitMode>
			while(LL_RTC_IsActiveFlag_INIT(RTC));
 8000b32:	bf00      	nop
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <RTC_Config+0xb0>)
 8000b36:	f7ff fea3 	bl	8000880 <LL_RTC_IsActiveFlag_INIT>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f9      	bne.n	8000b34 <RTC_Config+0x70>
			LL_RTC_ClearFlag_RS(RTC);
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <RTC_Config+0xb0>)
 8000b42:	f7ff fec3 	bl	80008cc <LL_RTC_ClearFlag_RS>
			while(!LL_RTC_IsActiveFlag_RS(RTC));
 8000b46:	bf00      	nop
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <RTC_Config+0xb0>)
 8000b4a:	f7ff feac 	bl	80008a6 <LL_RTC_IsActiveFlag_RS>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f9      	beq.n	8000b48 <RTC_Config+0x84>
			LL_RTC_EnableWriteProtection(RTC);
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <RTC_Config+0xb0>)
 8000b56:	f7ff fe46 	bl	80007e6 <LL_RTC_EnableWriteProtection>
			expe=1;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <RTC_Config+0xb4>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <RTC_Config+0xb4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <RTC_Config+0xb0>)
 8000b6a:	f7ff fe59 	bl	8000820 <LL_RTC_BAK_SetRegister>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40002800 	.word	0x40002800
 8000b78:	20000000 	.word	0x20000000

08000b7c <SysTick_Handler>:
//----------------------------------------------------------------------
	/**
	  * @brief This function handles System tick timer.
	  */
	void SysTick_Handler(void)
	{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN SysTick_IRQn 0 : gestion du clignotement de la LED 2 sec de période   (0,5 Hz de féquence) et 50ms*expe de durée active   */
		counter ++ ;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <SysTick_Handler+0x70>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a19      	ldr	r2, [pc, #100]	; (8000bec <SysTick_Handler+0x70>)
 8000b88:	6013      	str	r3, [r2, #0]
		if ((counter>0) &&  (counter<= 5*expe))
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <SysTick_Handler+0x70>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dd0b      	ble.n	8000baa <SysTick_Handler+0x2e>
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <SysTick_Handler+0x74>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <SysTick_Handler+0x70>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	db02      	blt.n	8000baa <SysTick_Handler+0x2e>
			LED_GREEN(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fbcb 	bl	8000340 <LED_GREEN>

		if ((counter> 5*expe) && (counter<200))
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <SysTick_Handler+0x74>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	441a      	add	r2, r3
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <SysTick_Handler+0x70>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	da06      	bge.n	8000bca <SysTick_Handler+0x4e>
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <SysTick_Handler+0x70>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2bc7      	cmp	r3, #199	; 0xc7
 8000bc2:	dc02      	bgt.n	8000bca <SysTick_Handler+0x4e>
			LED_GREEN(0);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fbbb 	bl	8000340 <LED_GREEN>

		if (counter>200)
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <SysTick_Handler+0x70>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2bc8      	cmp	r3, #200	; 0xc8
 8000bd0:	dd02      	ble.n	8000bd8 <SysTick_Handler+0x5c>
			counter=0;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SysTick_Handler+0x70>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]

	  /* USER CODE END SysTick_IRQn 0 */

	  /* USER CODE BEGIN SysTick_IRQn 1 : détection de la transition repos-> pressé du bouton bleu*/
		if (BLUE_BUTTON()){ // à regarder si c'est bien la détection repos->pressé
 8000bd8:	f7ff fbc8 	bl	800036c <BLUE_BUTTON>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SysTick_Handler+0x6c>
			bluemode=1;
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Handler+0x78>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
	  /* USER CODE BEGIN SysTick_IRQn 2 : gestion de l'action du GPIO PC10 sortie 50 Hz */

	  /* USER CODE END SysTick_IRQn 2 */


	}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000024 	.word	0x20000024

08000bf8 <RTC_WKUP_IRQHandler>:
	}

//----------------------------------------------------------------------
	// wakeup timer interrupt Handler (inutile mais doit etre defini)
	void RTC_WKUP_IRQHandler()
	{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 8000bfc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c00:	f7ff fe86 	bl	8000910 <LL_EXTI_ClearFlag_0_31>
	}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SystemInit>:
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <SystemInit+0x64>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <SystemInit+0x64>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <SystemInit+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <SystemInit+0x68>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <SystemInit+0x68>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <SystemInit+0x68>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <SystemInit+0x68>)
 8000c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SystemInit+0x68>)
 8000c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SystemInit+0x68>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <SystemInit+0x68>)
 8000c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <SystemInit+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x64>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <SystemCoreClockUpdate>:
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b4f      	ldr	r3, [pc, #316]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <SystemCoreClockUpdate+0x3a>
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e005      	b.n	8000cfe <SystemCoreClockUpdate+0x46>
 8000cf2:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <SystemCoreClockUpdate+0x160>)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b0c      	cmp	r3, #12
 8000d12:	d865      	bhi.n	8000de0 <SystemCoreClockUpdate+0x128>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <SystemCoreClockUpdate+0x64>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000de1 	.word	0x08000de1
 8000d24:	08000de1 	.word	0x08000de1
 8000d28:	08000de1 	.word	0x08000de1
 8000d2c:	08000d59 	.word	0x08000d59
 8000d30:	08000de1 	.word	0x08000de1
 8000d34:	08000de1 	.word	0x08000de1
 8000d38:	08000de1 	.word	0x08000de1
 8000d3c:	08000d61 	.word	0x08000d61
 8000d40:	08000de1 	.word	0x08000de1
 8000d44:	08000de1 	.word	0x08000de1
 8000d48:	08000de1 	.word	0x08000de1
 8000d4c:	08000d69 	.word	0x08000d69
 8000d50:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e047      	b.n	8000de8 <SystemCoreClockUpdate+0x130>
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000d5a:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <SystemCoreClockUpdate+0x168>)
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e043      	b.n	8000de8 <SystemCoreClockUpdate+0x130>
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <SystemCoreClockUpdate+0x16c>)
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e03f      	b.n	8000de8 <SystemCoreClockUpdate+0x130>
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d002      	beq.n	8000d8c <SystemCoreClockUpdate+0xd4>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d006      	beq.n	8000d98 <SystemCoreClockUpdate+0xe0>
 8000d8a:	e00b      	b.n	8000da4 <SystemCoreClockUpdate+0xec>
 8000d8c:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <SystemCoreClockUpdate+0x168>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	e00b      	b.n	8000db0 <SystemCoreClockUpdate+0xf8>
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <SystemCoreClockUpdate+0x16c>)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	e005      	b.n	8000db0 <SystemCoreClockUpdate+0xf8>
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	bf00      	nop
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	0e5b      	lsrs	r3, r3, #25
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e003      	b.n	8000de8 <SystemCoreClockUpdate+0x130>
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	bf00      	nop
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <SystemCoreClockUpdate+0x15c>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <SystemCoreClockUpdate+0x170>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <SystemCoreClockUpdate+0x164>)
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	0800100c 	.word	0x0800100c
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	00f42400 	.word	0x00f42400
 8000e24:	007a1200 	.word	0x007a1200
 8000e28:	08000ffc 	.word	0x08000ffc

08000e2c <Reset_Handler>:
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopForever+0x2>
 8000e30:	f7ff ff0c 	bl	8000c4c <SystemInit>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <LoopForever+0x6>)
 8000e3a:	585b      	ldr	r3, [r3, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <LoopForever+0xa>)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopForever+0xe>)
 8000e44:	1842      	adds	r2, r0, r1
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LoopForever+0x16>)
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>
 8000e5a:	f000 f89f 	bl	8000f9c <__libc_init_array>
 8000e5e:	f7ff fd67 	bl	8000930 <main>

08000e62 <LoopForever>:
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
 8000e64:	20018000 	.word	0x20018000
 8000e68:	08001044 	.word	0x08001044
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000002c 	.word	0x2000002c

08000e7c <ADC1_2_IRQHandler>:
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>

08000e7e <LL_RTC_EnableInitMode>:
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8c:	60da      	str	r2, [r3, #12]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_RTC_IsActiveFlag_INIT>:
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eaa:	2b40      	cmp	r3, #64	; 0x40
 8000eac:	bf0c      	ite	eq
 8000eae:	2301      	moveq	r3, #1
 8000eb0:	2300      	movne	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffcd 	bl	8000e9a <LL_RTC_IsActiveFlag_INIT>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11e      	bne.n	8000f44 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb9 	bl	8000e7e <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffc4 	bl	8000e9a <LL_RTC_IsActiveFlag_INIT>
 8000f12:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8000f14:	e010      	b.n	8000f38 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8000f16:	f7ff ffd3 	bl	8000ec0 <LL_SYSTICK_IsActiveCounterFlag>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d102      	bne.n	8000f26 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb7 	bl	8000e9a <LL_RTC_IsActiveFlag_INIT>
 8000f2c:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <LL_RTC_EnterInitMode+0x5c>
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1e8      	bne.n	8000f16 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <LL_InitTick+0x30>)
 8000f64:	3b01      	subs	r3, #1
 8000f66:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <LL_InitTick+0x30>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <LL_InitTick+0x30>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk |
				   SysTick_CTRL_TICKINT_Msk  // j'active l'interruption
				   ;                   /* Enable the Systick Timer */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <LL_Init10msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init10msTick(uint32_t HCLKFrequency)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 100U);
 8000f8c:	2164      	movs	r1, #100	; 0x64
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffde 	bl	8000f50 <LL_InitTick>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <__libc_init_array>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4e0d      	ldr	r6, [pc, #52]	; (8000fd4 <__libc_init_array+0x38>)
 8000fa0:	4c0d      	ldr	r4, [pc, #52]	; (8000fd8 <__libc_init_array+0x3c>)
 8000fa2:	1ba4      	subs	r4, r4, r6
 8000fa4:	10a4      	asrs	r4, r4, #2
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	d109      	bne.n	8000fc0 <__libc_init_array+0x24>
 8000fac:	4e0b      	ldr	r6, [pc, #44]	; (8000fdc <__libc_init_array+0x40>)
 8000fae:	4c0c      	ldr	r4, [pc, #48]	; (8000fe0 <__libc_init_array+0x44>)
 8000fb0:	f000 f818 	bl	8000fe4 <_init>
 8000fb4:	1ba4      	subs	r4, r4, r6
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	2500      	movs	r5, #0
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	d105      	bne.n	8000fca <__libc_init_array+0x2e>
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc4:	4798      	blx	r3
 8000fc6:	3501      	adds	r5, #1
 8000fc8:	e7ee      	b.n	8000fa8 <__libc_init_array+0xc>
 8000fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fce:	4798      	blx	r3
 8000fd0:	3501      	adds	r5, #1
 8000fd2:	e7f2      	b.n	8000fba <__libc_init_array+0x1e>
 8000fd4:	0800103c 	.word	0x0800103c
 8000fd8:	0800103c 	.word	0x0800103c
 8000fdc:	0800103c 	.word	0x0800103c
 8000fe0:	08001040 	.word	0x08001040

08000fe4 <_init>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr

08000ff0 <_fini>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr
